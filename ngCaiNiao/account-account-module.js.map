{"version":3,"sources":["webpack:///./node_modules/ng-recaptcha/index.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-common.module.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-loader.service.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha-settings.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha.component.js","webpack:///./node_modules/ng-recaptcha/recaptcha/recaptcha.module.js","webpack:///./node_modules/rxjs-compat/_esm5/observable/of.js","webpack:///./src/account/account-routing.module.ts","webpack:///./src/account/account.component.html","webpack:///./src/account/account.component.less","webpack:///./src/account/account.component.ts","webpack:///./src/account/account.module.ts","webpack:///./src/account/auth/account-route-guard.ts","webpack:///./src/account/email-activation/confirm-email.component.ts","webpack:///./src/account/email-activation/email-activation.component.html","webpack:///./src/account/email-activation/email-activation.component.ts","webpack:///./src/account/language-switch.component.html","webpack:///./src/account/language-switch.component.ts","webpack:///./src/account/login/login.component.html","webpack:///./src/account/login/login.component.ts","webpack:///./src/account/login/login.service.ts","webpack:///./src/account/login/send-two-factor-code.component.html","webpack:///./src/account/login/send-two-factor-code.component.ts","webpack:///./src/account/login/validate-two-factor-code.component.html","webpack:///./src/account/login/validate-two-factor-code.component.less","webpack:///./src/account/login/validate-two-factor-code.component.ts","webpack:///./src/account/password/forgot-password.component.html","webpack:///./src/account/password/forgot-password.component.ts","webpack:///./src/account/password/reset-password.component.html","webpack:///./src/account/password/reset-password.component.ts","webpack:///./src/account/password/reset-password.model.ts","webpack:///./src/account/payment/buy.component.html","webpack:///./src/account/payment/buy.component.ts","webpack:///./src/account/payment/payment-gateways.component.html","webpack:///./src/account/payment/payment-gateways.component.ts","webpack:///./src/account/payment/paypal/paypal.component.html","webpack:///./src/account/payment/paypal/paypal.component.ts","webpack:///./src/account/payment/upgrade-or-extend.component.html","webpack:///./src/account/payment/upgrade-or-extend.component.ts","webpack:///./src/account/register/pricing.min.css","webpack:///./src/account/register/register-tenant-result.component.html","webpack:///./src/account/register/register-tenant-result.component.ts","webpack:///./src/account/register/register-tenant.component.html","webpack:///./src/account/register/register-tenant.component.ts","webpack:///./src/account/register/register-tenant.model.ts","webpack:///./src/account/register/register.component.html","webpack:///./src/account/register/register.component.ts","webpack:///./src/account/register/register.model.ts","webpack:///./src/account/register/select-edition.component.html","webpack:///./src/account/register/select-edition.component.less","webpack:///./src/account/register/select-edition.component.ts","webpack:///./src/account/register/tenant-registration-helper.service.ts","webpack:///./src/account/shared/tenant-change-modal.component.html","webpack:///./src/account/shared/tenant-change-modal.component.ts","webpack:///./src/account/shared/tenant-change.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb,8CAA8C,cAAc;AAC5D,4BAA4B,mBAAO,CAAC,qGAAiC;AACrE;AACA,iCAAiC,mBAAO,CAAC,+GAAsC;AAC/E;AACA;AACA,yBAAyB,mBAAO,CAAC,+FAA8B;AAC/D;AACA,2BAA2B,mBAAO,CAAC,mGAAgC;AACnE;;;;;;;;;;;;;ACVa;AACb,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,4BAA4B,mBAAO,CAAC,2FAAuB;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,wDAAwD,WAAW;AACnE;AACA,CAAC;AACD;;;;;;;;;;;;;ACjBa;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,uEAAiB;AACxC,aAAa,mBAAO,CAAC,iEAAe;AACpC,wBAAwB,mBAAO,CAAC,iFAAsB;AACtD,WAAW,mBAAO,CAAC,6EAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC;AACA;AACA,yDAAyD;AACzD,SAAS,gCAAgC,mDAAmD,IAAI;AAChG,SAAS,gCAAgC,wBAAwB,GAAG,2DAA2D,IAAI;AACnI,MAAM;AACN;AACA,CAAC;AACD;;;;;;;;;;;;;AClDa;AACb,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC;;;;;;;;;;;;;ACHa;AACb,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,iCAAiC,mBAAO,CAAC,qGAA4B;AACrE,2BAA2B,mBAAO,CAAC,yFAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,6CAA6C,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+CAA+C,EAAE;AAC7F,aAAa;AACb;AACA,4CAA4C,wBAAwB,EAAE;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qDAAqD;AACrD,SAAS,2BAA2B;AACpC,SAAS,2DAA2D;AACpE,SAAS,uBAAuB;AAChC,SAAS,gCAAgC,wBAAwB,GAAG,wEAAwE,IAAI;AAChJ,MAAM;AACN;AACA,gBAAgB,qBAAqB,GAAG,+CAA+C;AACvF,qBAAqB,qBAAqB;AAC1C,mBAAmB,qBAAqB;AACxC,kBAAkB,qBAAqB;AACvC,kBAAkB,qBAAqB;AACvC,sBAAsB,qBAAqB;AAC3C,mBAAmB,qBAAqB;AACxC,sBAAsB,sBAAsB;AAC5C;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACxHa;AACb,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,gCAAgC,mBAAO,CAAC,mGAA2B;AACnE,iCAAiC,mBAAO,CAAC,qGAA4B;AACrE,4BAA4B,mBAAO,CAAC,2FAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA,CAAC;AACD;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAA0B;AAC1B,8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDyC;AAC6B;AACqB;AACpC;AACQ;AACoB;AACM;AAChC;AAC2B;AACQ;A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","file":"account-account-module.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar recaptcha_component_1 = require(\"./recaptcha/recaptcha.component\");\nexports.RecaptchaComponent = recaptcha_component_1.RecaptchaComponent;\nvar recaptcha_loader_service_1 = require(\"./recaptcha/recaptcha-loader.service\");\nexports.RecaptchaLoaderService = recaptcha_loader_service_1.RecaptchaLoaderService;\nexports.RECAPTCHA_LANGUAGE = recaptcha_loader_service_1.RECAPTCHA_LANGUAGE;\nvar recaptcha_module_1 = require(\"./recaptcha/recaptcha.module\");\nexports.RecaptchaModule = recaptcha_module_1.RecaptchaModule;\nvar recaptcha_settings_1 = require(\"./recaptcha/recaptcha-settings\");\nexports.RECAPTCHA_SETTINGS = recaptcha_settings_1.RECAPTCHA_SETTINGS;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_component_1 = require(\"./recaptcha.component\");\nvar RecaptchaCommonModule = /** @class */ (function () {\n    function RecaptchaCommonModule() {\n    }\n    RecaptchaCommonModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    declarations: [recaptcha_component_1.RecaptchaComponent],\n                    exports: [recaptcha_component_1.RecaptchaComponent],\n                },] },\n    ];\n    /** @nocollapse */\n    RecaptchaCommonModule.ctorParameters = function () { return []; };\n    return RecaptchaCommonModule;\n}());\nexports.RecaptchaCommonModule = RecaptchaCommonModule;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"@angular/common\");\nvar core_1 = require(\"@angular/core\");\nvar BehaviorSubject_1 = require(\"rxjs/BehaviorSubject\");\nvar of_1 = require(\"rxjs/observable/of\");\nexports.RECAPTCHA_LANGUAGE = new core_1.InjectionToken('recaptcha-language');\nvar RecaptchaLoaderService = /** @class */ (function () {\n    function RecaptchaLoaderService(\n        // tslint:disable-next-line:no-any\n        platformId, language) {\n        this.platformId = platformId;\n        this.language = language;\n        this.init();\n        this.ready = common_1.isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of_1.of();\n    }\n    /** @internal */\n    RecaptchaLoaderService.prototype.init = function () {\n        if (RecaptchaLoaderService.ready) {\n            return;\n        }\n        if (common_1.isPlatformBrowser(this.platformId)) {\n            window.ng2recaptchaloaded = function () {\n                RecaptchaLoaderService.ready.next(grecaptcha);\n            };\n            RecaptchaLoaderService.ready = new BehaviorSubject_1.BehaviorSubject(null);\n            var script = document.createElement('script');\n            script.innerHTML = '';\n            var langParam = this.language ? '&hl=' + this.language : '';\n            script.src = \"https://www.google.com/recaptcha/api.js?render=explicit&onload=ng2recaptchaloaded\" + langParam;\n            script.async = true;\n            script.defer = true;\n            document.head.appendChild(script);\n        }\n    };\n    /**\n     * @internal\n     * @nocollapse\n     */\n    RecaptchaLoaderService.ready = null;\n    RecaptchaLoaderService.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    RecaptchaLoaderService.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [exports.RECAPTCHA_LANGUAGE,] },] },\n    ]; };\n    return RecaptchaLoaderService;\n}());\nexports.RecaptchaLoaderService = RecaptchaLoaderService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nexports.RECAPTCHA_SETTINGS = new core_1.InjectionToken('recaptcha-settings');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_loader_service_1 = require(\"./recaptcha-loader.service\");\nvar recaptcha_settings_1 = require(\"./recaptcha-settings\");\nvar nextId = 0;\nvar RecaptchaComponent = /** @class */ (function () {\n    function RecaptchaComponent(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = \"ngrecaptcha-\" + nextId++;\n        this.resolved = new core_1.EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    RecaptchaComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.subscription = this.loader.ready.subscribe(function (grecaptcha) {\n            if (grecaptcha != null) {\n                _this.grecaptcha = grecaptcha;\n                _this.renderRecaptcha();\n            }\n        });\n    };\n    RecaptchaComponent.prototype.ngOnDestroy = function () {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    RecaptchaComponent.prototype.execute = function () {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n    };\n    RecaptchaComponent.prototype.reset = function () {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.expired = function () {\n        this.resolved.emit(null);\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.captchaReponseCallback = function (response) {\n        this.resolved.emit(response);\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.grecaptchaReset = function () {\n        var _this = this;\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(function () { return _this.grecaptcha.reset(_this.widget); });\n        }\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.renderRecaptcha = function () {\n        var _this = this;\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: function (response) {\n                _this.zone.run(function () { return _this.captchaReponseCallback(response); });\n            },\n            'expired-callback': function () {\n                _this.zone.run(function () { return _this.expired(); });\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n    };\n    RecaptchaComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    exportAs: 'reCaptcha',\n                    selector: 're-captcha',\n                    template: \"\",\n                },] },\n    ];\n    /** @nocollapse */\n    RecaptchaComponent.ctorParameters = function () { return [\n        { type: core_1.ElementRef, },\n        { type: recaptcha_loader_service_1.RecaptchaLoaderService, },\n        { type: core_1.NgZone, },\n        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [recaptcha_settings_1.RECAPTCHA_SETTINGS,] },] },\n    ]; };\n    RecaptchaComponent.propDecorators = {\n        'id': [{ type: core_1.Input }, { type: core_1.HostBinding, args: ['attr.id',] },],\n        'siteKey': [{ type: core_1.Input },],\n        'theme': [{ type: core_1.Input },],\n        'type': [{ type: core_1.Input },],\n        'size': [{ type: core_1.Input },],\n        'tabIndex': [{ type: core_1.Input },],\n        'badge': [{ type: core_1.Input },],\n        'resolved': [{ type: core_1.Output },],\n    };\n    return RecaptchaComponent;\n}());\nexports.RecaptchaComponent = RecaptchaComponent;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar recaptcha_common_module_1 = require(\"./recaptcha-common.module\");\nvar recaptcha_loader_service_1 = require(\"./recaptcha-loader.service\");\nvar recaptcha_component_1 = require(\"./recaptcha.component\");\nvar RecaptchaModule = /** @class */ (function () {\n    function RecaptchaModule() {\n    }\n    RecaptchaModule.forRoot = function () {\n        return {\n            ngModule: RecaptchaModule,\n            providers: [\n                recaptcha_loader_service_1.RecaptchaLoaderService,\n            ],\n        };\n    };\n    RecaptchaModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    exports: [recaptcha_component_1.RecaptchaComponent],\n                    imports: [recaptcha_common_module_1.RecaptchaCommonModule],\n                },] },\n    ];\n    /** @nocollapse */\n    RecaptchaModule.ctorParameters = function () { return []; };\n    return RecaptchaModule;\n}());\nexports.RecaptchaModule = RecaptchaModule;\n","export { of } from 'rxjs';\n//# sourceMappingURL=of.js.map","import { NgModule } from '@angular/core';\nimport { NavigationEnd, Router, RouterModule } from '@angular/router';\nimport { AppUiCustomizationService } from '@shared/common/ui/app-ui-customization.service';\nimport { AccountComponent } from './account.component';\nimport { AccountRouteGuard } from './auth/account-route-guard';\nimport { ConfirmEmailComponent } from './email-activation/confirm-email.component';\nimport { EmailActivationComponent } from './email-activation/email-activation.component';\nimport { LoginComponent } from './login/login.component';\nimport { SendTwoFactorCodeComponent } from './login/send-two-factor-code.component';\nimport { ValidateTwoFactorCodeComponent } from './login/validate-two-factor-code.component';\nimport { ForgotPasswordComponent } from './password/forgot-password.component';\nimport { ResetPasswordComponent } from './password/reset-password.component';\nimport { BuyComponent } from './payment/buy.component';\nimport { UpgradeOrExtendComponent } from './payment/upgrade-or-extend.component';\nimport { RegisterTenantResultComponent } from './register/register-tenant-result.component';\nimport { RegisterTenantComponent } from './register/register-tenant.component';\nimport { RegisterComponent } from './register/register.component';\nimport { SelectEditionComponent } from './register/select-edition.component';\n\n@NgModule({\n    imports: [\n        RouterModule.forChild([\n            {\n                path: '',\n                component: AccountComponent,\n                children: [\n                    { path: '', redirectTo: 'login' },\n                    { path: 'login', component: LoginComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'register', component: RegisterComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'register-tenant', component: RegisterTenantComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'register-tenant-result', component: RegisterTenantResultComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'forgot-password', component: ForgotPasswordComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'reset-password', component: ResetPasswordComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'email-activation', component: EmailActivationComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'confirm-email', component: ConfirmEmailComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'send-code', component: SendTwoFactorCodeComponent, canActivate: [AccountRouteGuard] },\n                    { path: 'verify-code', component: ValidateTwoFactorCodeComponent, canActivate: [AccountRouteGuard] },\n\n                    { path: 'buy', component: BuyComponent },\n                    { path: 'extend', component: UpgradeOrExtendComponent },\n                    { path: 'upgrade', component: UpgradeOrExtendComponent },\n                    { path: 'select-edition', component: SelectEditionComponent }\n                ]\n            }\n        ])\n    ],\n    exports: [\n        RouterModule\n    ]\n})\nexport class AccountRoutingModule {\n    constructor(\n        private router: Router,\n        private _uiCustomizationService: AppUiCustomizationService\n    ) {\n        router.events.subscribe((event: NavigationEnd) => {\n            setTimeout(() => {\n                //this will reinitialize metronic App, when navigated to admin module\n                mApp.initialized = false;\n\n                this.toggleBodyCssClass(event.url);\n            }, 0);\n        });\n    }\n\n    toggleBodyCssClass(url: string): void {\n        if (!url) {\n            $('body').attr('class', this._uiCustomizationService.getAccountModuleBodyClass());\n            return;\n        }\n\n        if (url.indexOf('/account/') >= 0) {\n            $('body').attr('class', this._uiCustomizationService.getAccountModuleBodyClass());\n        } else {\n            $('body').attr('class', this._uiCustomizationService.getAppModuleBodyClass());\n        }\n    }\n}\n","module.exports = \"<div [ngClass]=\\\"{'m-grid m-grid--hor m-grid--root m-page': !useFullWidthLayout(), 'm-content': useFullWidthLayout() }\\\" [style.text-align]=\\\"useFullWidthLayout() ? 'center' : 'left'\\\">\\n    <div [ngClass]=\\\"{'m-grid__item m-grid__item--fluid m-grid m-grid--ver-desktop m-grid--desktop m-grid--tablet-and-mobile m-grid--hor-tablet-and-mobile m-login m-login--1 m-login--singin': !useFullWidthLayout(), 'row':useFullWidthLayout()}\\\" id=\\\"m_login\\\">\\n        <div [ngClass]=\\\"{'m-grid__item m-grid__item--order-tablet-and-mobile-2 m-login__aside': !useFullWidthLayout(), 'col-md-12': useFullWidthLayout()}\\\">\\n            <div [ngClass]=\\\"{'m-stack m-stack--hor m-stack--desktop': !useFullWidthLayout()}\\\">\\n                <div [ngClass]=\\\"{'m-stack__item m-stack__item--fluid': !useFullWidthLayout()}\\\">\\n                    <div class=\\\"m-login__wrapper\\\">\\n                        <div class=\\\"m-login__logo\\\">\\n                            <a (click)=\\\"goToHome()\\\">\\n                                <img *ngIf=\\\"!appSession.tenant || !appSession.tenant.logoId\\\" [src]=\\\"appRootUrl() + 'assets/common/images/logo.png'\\\" alt=\\\"logo\\\" width=\\\"139\\\" height=\\\"35\\\" />\\n                                <img *ngIf=\\\"appSession.tenant && appSession.tenant.logoId\\\" [src]=\\\"remoteServiceBaseUrl + '/TenantCustomization/GetTenantLogo?skin=light&tenantId=' + appSession.tenant.id + '&id=' + appSession.tenant.logoId\\\" alt=\\\"logo\\\" width=\\\"168\\\" height=\\\"33\\\" />\\n                            </a>\\n                        </div>\\n                        <div *ngIf=\\\"showTenantChange()\\\" class=\\\"content tenant-change-box\\\">\\n                            <tenant-change></tenant-change>\\n                        </div>\\n                        <router-outlet></router-outlet>\\n                    </div>\\n                    <div>\\n                        <language-switch></language-switch>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"!useFullWidthLayout()\\\" class=\\\"m-grid__item m-grid__item--fluid m-grid m-grid--center m-grid--hor m-grid__item--order-tablet-and-mobile-1 m-login__content\\\" [style.background-image]=\\\"getBgUrl()\\\">\\n            <div class=\\\"m-grid__item m-grid__item--middle\\\">\\n                <h3 class=\\\"m-login__welcome\\\">\\n                   AspNet Zero\\n                </h3>\\n                <p class=\\\"m-login__msg\\\">\\n                    Base solution for your next web application\\n                </p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"/***\\nLogin page\\n***/\\n/* bg color */\\n.login {\\n  background-color: #364150 !important;\\n}\\n.login .logo {\\n  margin: 0 auto;\\n  margin-top: 60px;\\n  padding: 15px;\\n  text-align: center;\\n}\\n.login .content {\\n  background-color: #eceef1;\\n  border-radius: 7px;\\n  width: 400px;\\n  margin: 40px auto 10px auto;\\n  padding: 30px;\\n  padding-top: 10px;\\n  overflow: hidden;\\n  position: relative;\\n}\\n.login .content h3 {\\n  color: #4db3a5;\\n  text-align: center;\\n  font-size: 28px;\\n  font-weight: 400 !important;\\n}\\n.login .content h4 {\\n  color: #555;\\n}\\n.login .content .hint {\\n  color: #999;\\n  padding: 0;\\n  margin: 15px 0 7px 0;\\n}\\n.login .content .login-form,\\n.login .content .forget-form {\\n  padding: 0px;\\n  margin: 0px;\\n}\\n.login .content .form-control {\\n  border: none;\\n  background-color: #dde3ec;\\n  height: 43px;\\n  color: #8290a3;\\n  border: 1px solid #dde3ec;\\n}\\n.login .content .form-control:focus,\\n.login .content .form-control:active {\\n  border: 1px solid #c3ccda;\\n}\\n.login .content .form-control::-moz-placeholder {\\n  color: #8290a3;\\n  opacity: 1;\\n}\\n.login .content .form-control:-ms-input-placeholder {\\n  color: #8290a3;\\n}\\n.login .content .form-control::-webkit-input-placeholder {\\n  color: #8290a3;\\n}\\n.login .content select.form-control {\\n  padding-left: 9px;\\n  padding-right: 9px;\\n}\\n.login .content .form-title {\\n  font-weight: 300;\\n  margin-bottom: 25px;\\n}\\n.login .content .form-actions {\\n  clear: both;\\n  border: 0px;\\n  border-bottom: 1px solid #eee;\\n  padding: 0px 30px 25px 30px;\\n  margin-left: -30px;\\n  margin-right: -30px;\\n}\\n.login-options {\\n  margin-bottom: 30px;\\n  overflow: hidden;\\n}\\n.login-options h4 {\\n  float: left;\\n  font-weight: 600;\\n  font-size: 15px;\\n  color: #7d91aa !important;\\n}\\n.login-options .social-icons {\\n  float: right;\\n  padding-top: 3px;\\n}\\n.social-icons {\\n  padding: 0;\\n  margin: 0;\\n}\\n.social-icons li {\\n  float: left;\\n  display: inline;\\n  list-style: none;\\n  margin-right: 5px;\\n  margin-bottom: 5px;\\n  text-indent: -9999px;\\n}\\n.social-icons li > a {\\n  border-radius: 2px;\\n  width: 28px;\\n  height: 28px;\\n  display: block;\\n  background-position: 0 0;\\n  background-repeat: no-repeat;\\n  transition: all 0.3s ease-in-out;\\n  -o-transition: all 0.3s ease-in-out;\\n  -ms-transition: all 0.3s ease-in-out;\\n  -moz-transition: all 0.3s ease-in-out;\\n  -webkit-transition: all 0.3s ease-in-out;\\n}\\n.social-icons li:hover > a {\\n  background-position: 0 -38px;\\n}\\n.social-icons li .twitter {\\n  background: url(/assets/common/images/social/twitter.png) no-repeat;\\n}\\n.social-icons li .facebook {\\n  background: url(/assets/common/images/social/facebook.png) no-repeat;\\n}\\n.social-icons li .googleplus {\\n  background: url(/assets/common/images/social/google.png) no-repeat;\\n}\\n.social-icons li .microsoft {\\n  background: url(/assets/common/images/social/microsoft.png) no-repeat;\\n}\\n.social-icons li .openidconnect {\\n  background: url(/assets/common/images/social/open-id-connect.png) no-repeat;\\n}\\n.login-options .social-icons li a {\\n  border-radius: 15px 15px 15px 15px !important;\\n  -moz-border-radius: 15px 15px 15px 15px !important;\\n  -webkit-border-radius: 15px 15px 15px 15px !important;\\n}\\n.login .content .form-actions .checkbox {\\n  margin-left: 0;\\n  padding-left: 0;\\n}\\n.login .content .forget-form .form-actions {\\n  border: 0;\\n  margin-bottom: 0;\\n  padding-bottom: 20px;\\n}\\n.login .content .register-form .form-actions {\\n  border: 0;\\n  margin-bottom: 0;\\n  padding-bottom: 0px;\\n}\\n.login .content .form-actions .btn {\\n  margin-top: 1px;\\n}\\n.login .content .form-actions .btn-success {\\n  font-weight: 600;\\n  padding: 10px 20px !important;\\n}\\n.login .content .form-actions .btn-default {\\n  font-weight: 600;\\n  padding: 10px 25px !important;\\n  color: #6c7a8d;\\n  background-color: #ffffff;\\n  border: none;\\n}\\n.login .content .form-actions .btn-default:hover {\\n  background-color: #fafaff;\\n  color: #45b6af;\\n}\\n.login .content .forget-password {\\n  font-size: 14px;\\n  float: right;\\n  display: inline-block;\\n  margin-top: 10px;\\n}\\n.login .content .check {\\n  color: #8290a3;\\n}\\n.login .content .rememberme {\\n  margin-left: 8px;\\n  margin-top: 10px;\\n}\\n.login .content .create-account {\\n  margin: 0 -40px -40px -40px;\\n  padding: 15px 0 17px 0;\\n  text-align: center;\\n  background-color: #6c7a8d;\\n  border-radius: 0 0 7px 7px;\\n}\\n.login .content .create-account p a {\\n  font-weight: 600;\\n  font-size: 14px;\\n  color: #c3cedd;\\n}\\n.login .content .create-account .pipe-divider {\\n  color: #c3cedd;\\n}\\n.login .content .create-account a {\\n  display: inline-block;\\n  margin-top: 5px;\\n}\\n.login .content .alert {\\n  margin-bottom: 10px;\\n}\\n.login .content .alert:last-child {\\n  margin-bottom: 0;\\n}\\n/* footer copyright */\\n.login .copyright {\\n  text-align: center;\\n  margin: 0 auto 30px 0;\\n  padding: 10px;\\n  color: #7a8ca5;\\n  font-size: 13px;\\n}\\n.language-switch-area {\\n  text-align: center;\\n  padding: 10px;\\n}\\n.language-switch-area a {\\n  cursor: pointer;\\n}\\n.language-switch-area a span {\\n  -ms-opacity: 0.5;\\n  opacity: 0.5;\\n}\\n.language-switch-area a span.language-icon-current {\\n  -ms-opacity: 1;\\n  opacity: 1;\\n}\\n@media (max-width: 440px) {\\n  /***\\n  Login page\\n  ***/\\n  .login .logo {\\n    margin-top: 10px;\\n  }\\n  .login .content {\\n    width: 280px;\\n    margin-top: 10px;\\n  }\\n  .login .content h3 {\\n    font-size: 22px;\\n  }\\n  .forget-password {\\n    display: inline-block;\\n    margin-top: 20px;\\n  }\\n  .login-options .social-icons {\\n    float: left;\\n    padding-top: 3px;\\n  }\\n  .login .checkbox {\\n    font-size: 13px;\\n  }\\n}\\n.content.account-forms {\\n  margin-top: 10px;\\n}\\n.content.tenant-change-box {\\n  padding: 16px;\\n  text-align: center;\\n}\\n\"","import { Component, Injector, OnInit, ViewContainerRef, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppConsts } from '@shared/AppConsts';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppUiCustomizationService } from '@shared/common/ui/app-ui-customization.service';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport { LoginService } from './login/login.service';\n\n@Component({\n    templateUrl: './account.component.html',\n    styleUrls: [\n        './account.component.less'\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AccountComponent extends AppComponentBase implements OnInit {\n\n    private viewContainerRef: ViewContainerRef;\n\n    currentYear: number = moment().year();\n    remoteServiceBaseUrl: string = AppConsts.remoteServiceBaseUrl;\n    tenantChangeDisabledRoutes: string[] = ['select-edition', 'buy', 'upgrade', 'extend', 'register-tenant'];\n\n    public constructor(\n        injector: Injector,\n        private _router: Router,\n        private _loginService: LoginService,\n        private _uiCustomizationService: AppUiCustomizationService,\n        viewContainerRef: ViewContainerRef\n    ) {\n        super(injector);\n\n        // We need this small hack in order to catch application root view container ref for modals\n        this.viewContainerRef = viewContainerRef;\n    }\n\n    showTenantChange(): boolean {\n        if (!this._router.url) {\n            return false;\n        }\n\n        if (_.filter(this.tenantChangeDisabledRoutes, route => this._router.url.indexOf('/account/' + route) >= 0).length) {\n            return false;\n        }\n\n        return abp.multiTenancy.isEnabled && !this.supportsTenancyNameInUrl();\n    }\n\n    useFullWidthLayout(): boolean {\n        return this._router.url.indexOf('/account/select-edition') >= 0;\n    }\n\n    ngOnInit(): void {\n        this._loginService.init();\n        $('body').attr('class', this._uiCustomizationService.getAccountModuleBodyClass());\n    }\n\n    goToHome(): void {\n        (window as any).location.href = '/';\n    }\n\n    getBgUrl(): string {\n        return 'url(./assets/metronic/dist/html/' + this.ui.getTheme() + '/assets/demo/' + this.ui.getTheme() +'/media/img/bg/bg-4.jpg)';\n    }\n\n    private supportsTenancyNameInUrl() {\n        return (AppConsts.appBaseUrlFormat && AppConsts.appBaseUrlFormat.indexOf(AppConsts.tenancyNamePlaceHolderInUrl) >= 0);\n    }\n}\n","import { AbpModule } from '@abp/abp.module';\nimport * as ngCommon from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { CommonModule } from '@shared/common/common.module';\nimport { ServiceProxyModule } from '@shared/service-proxies/service-proxy.module';\nimport { UtilsModule } from '@shared/utils/utils.module';\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AccountComponent } from './account.component';\nimport { AccountRouteGuard } from './auth/account-route-guard';\nimport { ConfirmEmailComponent } from './email-activation/confirm-email.component';\nimport { EmailActivationComponent } from './email-activation/email-activation.component';\nimport { LanguageSwitchComponent } from './language-switch.component';\nimport { LoginComponent } from './login/login.component';\nimport { LoginService } from './login/login.service';\nimport { SendTwoFactorCodeComponent } from './login/send-two-factor-code.component';\nimport { ValidateTwoFactorCodeComponent } from './login/validate-two-factor-code.component';\nimport { ForgotPasswordComponent } from './password/forgot-password.component';\nimport { ResetPasswordComponent } from './password/reset-password.component';\nimport { BuyComponent } from './payment/buy.component';\nimport { PaymentGatewaysComponent } from './payment/payment-gateways.component';\nimport { PayPalComponent } from './payment/paypal/paypal.component';\nimport { UpgradeOrExtendComponent } from './payment/upgrade-or-extend.component';\nimport { RegisterTenantResultComponent } from './register/register-tenant-result.component';\nimport { RegisterTenantComponent } from './register/register-tenant.component';\nimport { RegisterComponent } from './register/register.component';\nimport { SelectEditionComponent } from './register/select-edition.component';\nimport { TenantRegistrationHelperService } from './register/tenant-registration-helper.service';\nimport { TenantChangeModalComponent } from './shared/tenant-change-modal.component';\nimport { TenantChangeComponent } from './shared/tenant-change.component';\n\n@NgModule({\n    imports: [\n        ngCommon.CommonModule,\n        FormsModule,\n        HttpModule,\n        JsonpModule,\n\n        RecaptchaModule.forRoot(),\n        ModalModule.forRoot(),\n\n        AbpModule,\n\n        CommonModule,\n\n        UtilsModule,\n        ServiceProxyModule,\n        AccountRoutingModule\n    ],\n    declarations: [\n        AccountComponent,\n        TenantChangeComponent,\n        TenantChangeModalComponent,\n        LoginComponent,\n        RegisterComponent,\n        RegisterTenantComponent,\n        RegisterTenantResultComponent,\n        SelectEditionComponent,\n        ForgotPasswordComponent,\n        ResetPasswordComponent,\n        EmailActivationComponent,\n        ConfirmEmailComponent,\n        SendTwoFactorCodeComponent,\n        ValidateTwoFactorCodeComponent,\n        LanguageSwitchComponent,\n        BuyComponent,\n        UpgradeOrExtendComponent,\n        PaymentGatewaysComponent,\n        PayPalComponent\n    ],\n    providers: [\n        LoginService,\n        TenantRegistrationHelperService,\n        AccountRouteGuard\n    ]\n})\nexport class AccountModule {\n\n}\n","import { PermissionCheckerService } from '@abp/auth/permission-checker.service';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { AppSessionService } from '@shared/common/session/app-session.service';\n\n@Injectable()\nexport class AccountRouteGuard implements CanActivate {\n\n    constructor(\n        private _permissionChecker: PermissionCheckerService,\n        private _router: Router,\n        private _sessionService: AppSessionService,\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\n        if (this._sessionService.user) {\n            this._router.navigate([this.selectBestRoute()]);\n            return false;\n        }\n\n        return true;\n    }\n\n    selectBestRoute(): string {\n\n        if (this._permissionChecker.isGranted('Pages.Administration.Host.Dashboard')) {\n            return '/app/admin/hostDashboard';\n        }\n\n        if (this._permissionChecker.isGranted('Pages.Tenant.Dashboard')) {\n            return '/app/main/dashboard';\n        }\n\n        return '/app/notifications';\n    }\n}\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppSessionService } from '@shared/common/session/app-session.service';\nimport { AccountServiceProxy, ActivateEmailInput } from '@shared/service-proxies/service-proxies';\n\n@Component({\n    template: `<p>{{waitMessage}}</p>`\n})\nexport class ConfirmEmailComponent extends AppComponentBase implements OnInit {\n\n    waitMessage: string;\n\n    model: ActivateEmailInput = new ActivateEmailInput();\n\n    constructor(\n        injector: Injector,\n        private _accountService: AccountServiceProxy,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute,\n        private _appSessionService: AppSessionService\n\n    ) {\n        super(injector);\n    }\n\n    ngOnInit(): void {\n        this.waitMessage = this.l('PleaseWaitToConfirmYourEmailMessage');\n\n        this.model.userId = this._activatedRoute.snapshot.queryParams['userId'];\n        this.model.confirmationCode = this._activatedRoute.snapshot.queryParams['confirmationCode'];\n\n        if (this._appSessionService.changeTenantIfNeeded(\n            this.parseTenantId(\n                this._activatedRoute.snapshot.queryParams['tenantId']\n            )\n        )) {\n            return;\n        }\n\n        this._accountService.activateEmail(this.model)\n            .subscribe(() => {\n                this.notify.success(this.l('YourEmailIsConfirmedMessage'));\n                this._router.navigate(['account/login']);\n            });\n    }\n\n\n    parseTenantId(tenantIdAsStr?: string): number {\n        let tenantId = !tenantIdAsStr ? undefined : parseInt(tenantIdAsStr, 10);\n        if (tenantId === NaN) {\n            tenantId = undefined;\n        }\n\n        return tenantId;\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l(\\\"EmailActivation\\\")}}\\n            </h3>\\n        </div>\\n        <form class=\\\"m-login__form m-form email-activation-form\\\" #emailActivationForm=\\\"ngForm\\\" method=\\\"post\\\" novalidate (ngSubmit)=\\\"save()\\\">\\n            <p>\\n                {{l(\\\"SendEmailActivationLink_Information\\\")}}\\n            </p>\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #emailAddressInput=\\\"ngModel\\\" [(ngModel)]=\\\"model.emailAddress\\\" class=\\\"form-control form-control-solid placeholder-no-fix input-ltr\\\" type=\\\"email\\\" autocomplete=\\\"off\\\" placeholder=\\\"{{l('EmailAddress')}} *\\\" name=\\\"emailAddress\\\" required maxlength=\\\"256\\\" email/>\\n                <validation-messages [formCtrl]=\\\"emailAddressInput\\\" [errorDefs]=\\\"[{email: l('InvalidEmailAddress')}]\\\"></validation-messages>\\n            </div>\\n\\n            <div class=\\\"m-login__form-action\\\">\\n\\n                <button [disabled]=\\\"saving\\\" routerLink=\\\"/account/login\\\" type=\\\"button\\\" class=\\\"btn btn-outline-primary  m-btn m-btn--pill m-btn--custom\\\"><i class=\\\"fa fa-arrow-left\\\"></i> {{l(\\\"Back\\\")}}</button>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!emailActivationForm.form.valid\\\" [buttonBusy]=\\\"saving\\\" [busyText]=\\\"l('SavingWithThreeDot')\\\"><i class=\\\"fa fa-check\\\"></i> {{l(\\\"Submit\\\")}}</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\"","import { Component, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AccountServiceProxy, SendEmailActivationLinkInput } from '@shared/service-proxies/service-proxies';\n\n@Component({\n    templateUrl: './email-activation.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class EmailActivationComponent extends AppComponentBase {\n\n    model: SendEmailActivationLinkInput = new SendEmailActivationLinkInput();\n    saving = false;\n\n    constructor (\n        injector: Injector,\n        private _accountService: AccountServiceProxy,\n        private _router: Router\n        ) {\n        super(injector);\n    }\n\n    save(): void {\n        this.saving = true;\n        this._accountService.sendEmailActivationLink(this.model)\n            .finally(() => { this.saving = false; })\n            .subscribe(() => {\n                this.message.success(this.l('ActivationMailSentMessage'), this.l('MailSent')).done(() => {\n                    this._router.navigate(['account/login']);\n                });\n            });\n    }\n}\n","module.exports = \"<div *ngIf=\\\"languages.length > 1\\\" class=\\\"language-switch-area\\\">\\n    <a *ngFor=\\\"let language of languages\\\" (click)=\\\"changeLanguage(language)\\\">\\n        <span [ngClass]=\\\"{'language-icon-current': language.name==currentLanguage.name}\\\" title=\\\"{{language.displayName}}\\\"><i class=\\\"{{language.icon}}\\\" [attr.aria-label]=\\\"language.displayName\\\"></i></span>\\n    </a>\\n</div>\\n\"","import { Component, Injector, OnInit } from '@angular/core';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport * as _ from 'lodash';\n\n@Component({\n    selector: 'language-switch',\n    templateUrl: './language-switch.component.html'\n})\nexport class LanguageSwitchComponent extends AppComponentBase implements OnInit {\n\n    currentLanguage: abp.localization.ILanguageInfo;\n    languages: abp.localization.ILanguageInfo[] = [];\n\n    constructor(injector: Injector) {\n        super(injector);\n    }\n\n    ngOnInit(): void {\n        this.languages = _.filter(abp.localization.languages, l => (<any>l).isDisabled === false);\n        this.currentLanguage = abp.localization.currentLanguage;\n    }\n\n    changeLanguage(language: abp.localization.ILanguageInfo) {\n        abp.utils.setCookieValue(\n            'Abp.Localization.CultureName',\n            language.name,\n            new Date(new Date().getTime() + 5 * 365 * 86400000), // 5 year\n            abp.appPath\n        );\n\n        location.reload();\n    }\n}\n","module.exports = \"<div class=\\\"m-login__signin\\\" [@routerTransition]>\\n    <div class=\\\"m-login__head\\\">\\n        <h3 class=\\\"m-login__title\\\">\\n            {{l(\\\"LogIn\\\")}}\\n        </h3>\\n    </div>\\n    <form #loginForm=\\\"ngForm\\\" class=\\\"m-login__form m-form login-form\\\" method=\\\"post\\\" novalidate (ngSubmit)=\\\"login()\\\">\\n\\n        <div class=\\\"form-group m-form__group\\\">\\n            <input #userNameOrEmailAddressInput=\\\"ngModel\\\" [(ngModel)]=\\\"loginService.authenticateModel.userNameOrEmailAddress\\\" autoFocus class=\\\"form-control m-input\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" placeholder=\\\"{{l('UserNameOrEmail')}} *\\\" name=\\\"userNameOrEmailAddress\\\" required />\\n            <validation-messages [formCtrl]=\\\"userNameOrEmailAddressInput\\\"></validation-messages>\\n        </div>\\n\\n        <div class=\\\"form-group m-form__group\\\">\\n            <input #passwordInput=\\\"ngModel\\\" [(ngModel)]=\\\"loginService.authenticateModel.password\\\" class=\\\"form-control m-input\\\" type=\\\"password\\\" autocomplete=\\\"off\\\" placeholder=\\\"{{l('Password')}} *\\\" name=\\\"password\\\" required maxlength=\\\"32\\\" />\\n            <validation-messages [formCtrl]=\\\"passwordInput\\\"></validation-messages>\\n        </div>\\n\\n        <div class=\\\"row m-login__form-sub\\\">\\n            <div class=\\\"col m--align-left\\\">\\n                <label class=\\\"m-checkbox m-checkbox--primary\\\">\\n                    <input class=\\\"form-control\\\" [(ngModel)]=\\\"loginService.rememberMe\\\" type=\\\"checkbox\\\" name=\\\"rememberMe\\\" value=\\\"true\\\" />{{l(\\\"RememberMe\\\")}}\\n                    <span></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col m--align-right\\\">\\n                <a routerLink=\\\"/account/forgot-password\\\" id=\\\"forget-password\\\" class=\\\"m-link forget-password\\\">{{l(\\\"ForgotPassword\\\")}}</a>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"m-login__form-action\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!loginForm.form.valid\\\">{{l(\\\"LogIn\\\")}}</button>\\n        </div>\\n    </form>\\n\\n    <div class=\\\"login-options\\\" *ngIf=\\\"(multiTenancySideIsTeanant || !isMultiTenancyEnabled) && loginService.externalLoginProviders.length > 0\\\">\\n        <h4>{{l(\\\"LoginWith\\\")}}</h4>\\n        <ul class=\\\"social-icons\\\">\\n            <li *ngFor=\\\"let provider of loginService.externalLoginProviders\\\">\\n                <a class=\\\"social-login-icon social-icon-color {{provider.icon}}\\\"\\n                   (click)=\\\"externalLogin(provider)\\\"\\n                   title=\\\"{{provider.name}}\\\"></a>\\n            </li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"m-stack__item m-stack__item--center\\\">\\n        <div class=\\\"m-login__account\\\">\\n            <span *ngIf=\\\"isSelfRegistrationAllowed\\\">\\n                <a routerLink=\\\"/account/register\\\" id=\\\"register-btn\\\" class=\\\"m-link m-link--primary m-login__account-link\\\">{{l(\\\"CreateAnAccount\\\")}}</a>\\n                <span class=\\\"pipe-divider\\\"> | </span>\\n            </span>\\n            <span *ngIf=\\\"!multiTenancySideIsTeanant && isTenantSelfRegistrationAllowed\\\">\\n                <a routerLink=\\\"/account/select-edition\\\" id=\\\"register-btn\\\" class=\\\"m-link m-link--primary m-login__account-link\\\">{{l(\\\"NewTenant\\\")}}</a>\\n                <span class=\\\"pipe-divider\\\"> | </span>\\n            </span>\\n            <a routerLink=\\\"/account/email-activation\\\" id=\\\"email-activation-btn\\\" class=\\\"m-link m-link--primary m-login__account-link\\\">{{l(\\\"EmailActivation\\\")}}</a>\\n        </div>\\n    </div>\\n</div>\\n\"","import { AbpSessionService } from '@abp/session/abp-session.service';\nimport { Component, Injector, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { SessionServiceProxy, UpdateUserSignInTokenOutput } from '@shared/service-proxies/service-proxies';\nimport { UrlHelper } from 'shared/helpers/UrlHelper';\nimport { ExternalLoginProvider, LoginService } from './login.service';\n\n@Component({\n    templateUrl: './login.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class LoginComponent extends AppComponentBase implements OnInit {\n    submitting = false;\n    isMultiTenancyEnabled: boolean = this.multiTenancy.isEnabled;\n\n    constructor(\n        injector: Injector,\n        public loginService: LoginService,\n        private _router: Router,\n        private _sessionService: AbpSessionService,\n        private _sessionAppService: SessionServiceProxy\n    ) {\n        super(injector);\n    }\n\n    get multiTenancySideIsTeanant(): boolean {\n        return this._sessionService.tenantId > 0;\n    }\n\n    get isTenantSelfRegistrationAllowed(): boolean {\n        return this.setting.getBoolean('App.TenantManagement.AllowSelfRegistration');\n    }\n\n    get isSelfRegistrationAllowed(): boolean {\n        if (!this._sessionService.tenantId) {\n            return false;\n        }\n\n        return this.setting.getBoolean('App.UserManagement.AllowSelfRegistration');\n    }\n\n    ngOnInit(): void {\n        if (this._sessionService.userId > 0 && UrlHelper.getReturnUrl() && UrlHelper.getSingleSignIn()) {\n            this._sessionAppService.updateUserSignInToken()\n                .subscribe((result: UpdateUserSignInTokenOutput) => {\n                    const initialReturnUrl = UrlHelper.getReturnUrl();\n                    const returnUrl = initialReturnUrl + (initialReturnUrl.indexOf('?') >= 0 ? '&' : '?') +\n                        'accessToken=' + result.signInToken +\n                        '&userId=' + result.encodedUserId +\n                        '&tenantId=' + result.encodedTenantId;\n\n                    location.href = returnUrl;\n                });\n        }\n    }\n\n    login(): void {\n        this.submitting = true;\n        this.loginService.authenticate(\n            () => this.submitting = false\n        );\n    }\n\n    externalLogin(provider: ExternalLoginProvider) {\n        this.loginService.externalAuthenticate(provider);\n    }\n}\n","import { TokenService } from '@abp/auth/token.service';\nimport { LogService } from '@abp/log/log.service';\nimport { MessageService } from '@abp/message/message.service';\nimport { UtilsService } from '@abp/utils/utils.service';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppConsts } from '@shared/AppConsts';\nimport { UrlHelper } from '@shared/helpers/UrlHelper';\nimport { AuthenticateModel, AuthenticateResultModel, ExternalAuthenticateModel, ExternalAuthenticateResultModel, ExternalLoginProviderInfoModel, TokenAuthServiceProxy } from '@shared/service-proxies/service-proxies';\nimport * as _ from 'lodash';\n\ndeclare const FB: any; // Facebook API\ndeclare const gapi: any; // Facebook API\ndeclare const WL: any; // Microsoft API\n\nexport class ExternalLoginProvider extends ExternalLoginProviderInfoModel {\n\n    static readonly FACEBOOK: string = 'Facebook';\n    static readonly GOOGLE: string = 'Google';\n    static readonly MICROSOFT: string = 'Microsoft';\n\n    icon: string;\n    initialized = false;\n\n    constructor(providerInfo: ExternalLoginProviderInfoModel) {\n        super();\n\n        this.name = providerInfo.name;\n        this.clientId = providerInfo.clientId;\n        this.icon = ExternalLoginProvider.getSocialIcon(this.name);\n    }\n\n    private static getSocialIcon(providerName: string): string {\n        providerName = providerName.toLowerCase();\n\n        if (providerName === 'google') {\n            providerName = 'googleplus';\n        }\n\n        return providerName;\n    }\n}\n\n@Injectable()\nexport class LoginService {\n\n    static readonly twoFactorRememberClientTokenName = 'TwoFactorRememberClientToken';\n\n    authenticateModel: AuthenticateModel;\n    authenticateResult: AuthenticateResultModel;\n\n    externalLoginProviders: ExternalLoginProvider[] = [];\n\n    rememberMe: boolean;\n\n    constructor(\n        private _tokenAuthService: TokenAuthServiceProxy,\n        private _router: Router,\n        private _utilsService: UtilsService,\n        private _messageService: MessageService,\n        private _tokenService: TokenService,\n        private _logService: LogService\n    ) {\n        this.clear();\n    }\n\n    authenticate(finallyCallback?: () => void, redirectUrl?: string): void {\n        finallyCallback = finallyCallback || (() => { });\n\n        // We may switch to localStorage instead of cookies\n        this.authenticateModel.twoFactorRememberClientToken = this._utilsService.getCookieValue(LoginService.twoFactorRememberClientTokenName);\n        this.authenticateModel.singleSignIn = UrlHelper.getSingleSignIn();\n        this.authenticateModel.returnUrl = UrlHelper.getReturnUrl();\n\n        this._tokenAuthService\n            .authenticate(this.authenticateModel)\n            .finally(finallyCallback)\n            .subscribe((result: AuthenticateResultModel) => {\n                this.processAuthenticateResult(result, redirectUrl);\n            });\n    }\n\n    externalAuthenticate(provider: ExternalLoginProvider): void {\n        this.ensureExternalLoginProviderInitialized(provider, () => {\n            if (provider.name === ExternalLoginProvider.FACEBOOK) {\n                FB.login(response => {\n                    this.facebookLoginStatusChangeCallback(response);\n                }, { scope: 'email' });\n            } else if (provider.name === ExternalLoginProvider.GOOGLE) {\n                gapi.auth2.getAuthInstance().signIn().then(() => {\n                    this.googleLoginStatusChangeCallback(gapi.auth2.getAuthInstance().isSignedIn.get());\n                });\n            } else if (provider.name === ExternalLoginProvider.MICROSOFT) {\n                WL.login({\n                    scope: ['wl.signin', 'wl.basic', 'wl.emails']\n                });\n            }\n        });\n    }\n\n    init(): void {\n        this.initExternalLoginProviders();\n    }\n\n    private processAuthenticateResult(authenticateResult: AuthenticateResultModel, redirectUrl?: string) {\n        this.authenticateResult = authenticateResult;\n\n        if (authenticateResult.shouldResetPassword) {\n            // Password reset\n\n            this._router.navigate(['account/reset-password'], {\n                queryParams: {\n                    userId: authenticateResult.userId,\n                    tenantId: abp.session.tenantId,\n                    resetCode: authenticateResult.passwordResetCode\n                }\n            });\n\n            this.clear();\n\n        } else if (authenticateResult.requiresTwoFactorVerification) {\n            // Two factor authentication\n\n            this._router.navigate(['account/send-code']);\n\n        } else if (authenticateResult.accessToken) {\n            // Successfully logged in\n            if (authenticateResult.returnUrl && !redirectUrl) {\n                redirectUrl = authenticateResult.returnUrl;\n            }\n\n            this.login(\n                authenticateResult.accessToken,\n                authenticateResult.encryptedAccessToken,\n                authenticateResult.expireInSeconds,\n                this.rememberMe,\n                authenticateResult.twoFactorRememberClientToken,\n                redirectUrl\n            );\n\n        } else {\n            // Unexpected result!\n\n            this._logService.warn('Unexpected authenticateResult!');\n            this._router.navigate(['account/login']);\n\n        }\n    }\n\n    private login(accessToken: string, encryptedAccessToken: string, expireInSeconds: number, rememberMe?: boolean, twoFactorRememberClientToken?: string, redirectUrl?: string): void {\n\n        let tokenExpireDate = rememberMe ? (new Date(new Date().getTime() + 1000 * expireInSeconds)) : undefined;\n\n        this._tokenService.setToken(\n            accessToken,\n            tokenExpireDate\n        );\n\n        this._utilsService.setCookieValue(\n            AppConsts.authorization.encrptedAuthTokenName,\n            encryptedAccessToken,\n            tokenExpireDate,\n            abp.appPath\n        );\n\n        if (twoFactorRememberClientToken) {\n            this._utilsService.setCookieValue(\n                LoginService.twoFactorRememberClientTokenName,\n                twoFactorRememberClientToken,\n                new Date(new Date().getTime() + 365 * 86400000), // 1 year\n                abp.appPath\n            );\n        }\n\n        if (redirectUrl) {\n            location.href = redirectUrl;\n        } else {\n            let initialUrl = UrlHelper.initialUrl;\n\n            if (initialUrl.indexOf('/account') > 0) {\n                initialUrl = AppConsts.appBaseUrl;\n            }\n\n            location.href = initialUrl;\n        }\n    }\n\n    private clear(): void {\n        this.authenticateModel = new AuthenticateModel();\n        this.authenticateModel.rememberClient = false;\n        this.authenticateResult = null;\n        this.rememberMe = false;\n    }\n\n    private initExternalLoginProviders() {\n        this._tokenAuthService\n            .getExternalAuthenticationProviders()\n            .subscribe((providers: ExternalLoginProviderInfoModel[]) => {\n                this.externalLoginProviders = _.map(providers, p => new ExternalLoginProvider(p));\n            });\n    }\n\n    ensureExternalLoginProviderInitialized(loginProvider: ExternalLoginProvider, callback: () => void) {\n        if (loginProvider.initialized) {\n            callback();\n            return;\n        }\n\n        if (loginProvider.name === ExternalLoginProvider.FACEBOOK) {\n            jQuery.getScript('//connect.facebook.net/en_US/sdk.js', () => {\n                FB.init({\n                    appId: loginProvider.clientId,\n                    cookie: false,\n                    xfbml: true,\n                    version: 'v2.5'\n                });\n\n                FB.getLoginStatus(response => {\n                    this.facebookLoginStatusChangeCallback(response);\n                    if (response.status !== 'connected') {\n                        callback();\n                    }\n                });\n            });\n        } else if (loginProvider.name === ExternalLoginProvider.GOOGLE) {\n            jQuery.getScript('https://apis.google.com/js/api.js', () => {\n                gapi.load('client:auth2',\n                    () => {\n                        gapi.client.init({\n                            clientId: loginProvider.clientId,\n                            scope: 'openid profile email'\n                        }).then(() => {\n                            callback();\n                        });\n                    });\n            });\n        } else if (loginProvider.name === ExternalLoginProvider.MICROSOFT) {\n            jQuery.getScript('//js.live.net/v5.0/wl.js', () => {\n                WL.Event.subscribe('auth.login', this.microsoftLogin);\n                WL.init({\n                    client_id: loginProvider.clientId,\n                    scope: ['wl.signin', 'wl.basic', 'wl.emails'],\n                    redirect_uri: AppConsts.appBaseUrl,\n                    response_type: 'token'\n                });\n            });\n        }\n    }\n\n    private facebookLoginStatusChangeCallback(resp) {\n        if (resp.status === 'connected') {\n            const model = new ExternalAuthenticateModel();\n            model.authProvider = ExternalLoginProvider.FACEBOOK;\n            model.providerAccessCode = resp.authResponse.accessToken;\n            model.providerKey = resp.authResponse.userID;\n            model.singleSignIn = UrlHelper.getSingleSignIn();\n            model.returnUrl = UrlHelper.getReturnUrl();\n\n            this._tokenAuthService.externalAuthenticate(model)\n                .subscribe((result: ExternalAuthenticateResultModel) => {\n                    if (result.waitingForActivation) {\n                        this._messageService.info('You have successfully registered. Waiting for activation!');\n                        return;\n                    }\n\n                    this.login(result.accessToken, result.encryptedAccessToken, result.expireInSeconds, false, '', result.returnUrl);\n                });\n        }\n    }\n\n    private googleLoginStatusChangeCallback(isSignedIn) {\n        if (isSignedIn) {\n            const model = new ExternalAuthenticateModel();\n            model.authProvider = ExternalLoginProvider.GOOGLE;\n            model.providerAccessCode = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;\n            model.providerKey = gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile().getId();\n            model.singleSignIn = UrlHelper.getSingleSignIn();\n            model.returnUrl = UrlHelper.getReturnUrl();\n\n            this._tokenAuthService.externalAuthenticate(model)\n                .subscribe((result: ExternalAuthenticateResultModel) => {\n                    if (result.waitingForActivation) {\n                        this._messageService.info('You have successfully registered. Waiting for activation!');\n                        return;\n                    }\n\n                    this.login(result.accessToken, result.encryptedAccessToken, result.expireInSeconds, false, '', result.returnUrl);\n                });\n        }\n    }\n\n    /**\n    * Microsoft login is not completed yet, because of an error thrown by zone.js: https://github.com/angular/zone.js/issues/290\n    */\n    private microsoftLogin() {\n        this._logService.debug(WL.getSession());\n        const model = new ExternalAuthenticateModel();\n        model.authProvider = ExternalLoginProvider.MICROSOFT;\n        model.providerAccessCode = WL.getSession().access_token;\n        model.providerKey = WL.getSession().id; // How to get id?\n        model.singleSignIn = UrlHelper.getSingleSignIn();\n        model.returnUrl = UrlHelper.getReturnUrl();\n\n        this._tokenAuthService.externalAuthenticate(model)\n            .subscribe((result: ExternalAuthenticateResultModel) => {\n                if (result.waitingForActivation) {\n                    this._messageService.info('You have successfully registered. Waiting for activation!');\n                    return;\n                }\n\n                this.login(result.accessToken, result.encryptedAccessToken, result.expireInSeconds, false, '', result.returnUrl);\n            });\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l('SendSecurityCode')}}\\n            </h3>\\n        </div>\\n        <form #twoFactorForm=\\\"ngForm\\\" class=\\\"m-login__form m-form\\\" method=\\\"post\\\" (ngSubmit)=\\\"submit()\\\">\\n            <p>{{l(\\\"SendSecurityCode_Information\\\")}}</p>\\n            <div class=\\\"form-group m-form__group\\\">\\n                <select autoFocus\\n                        size=\\\"1\\\"\\n                        class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"selectedTwoFactorProvider\\\"\\n                        name=\\\"selectedTwoFactorProvider\\\">\\n                    <option *ngFor=\\\"let provider of loginService.authenticateResult.twoFactorAuthProviders\\\" [value]=\\\"provider\\\">{{provider}}</option>\\n                </select>\\n            </div>\\n\\n            <div class=\\\"m-login__form-action\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\">{{l(\\\"Submit\\\")}}</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\\n\\n\\n\"","import { Component, Injector, OnInit } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { SendTwoFactorAuthCodeModel, TokenAuthServiceProxy } from '@shared/service-proxies/service-proxies';\nimport { LoginService } from './login.service';\n\n@Component({\n    templateUrl: './send-two-factor-code.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class SendTwoFactorCodeComponent extends AppComponentBase implements CanActivate, OnInit {\n\n    selectedTwoFactorProvider: string;\n    submitting = false;\n\n    constructor(\n        injector: Injector,\n        public loginService: LoginService,\n        private _tokenAuthService: TokenAuthServiceProxy,\n        private _router: Router\n    ) {\n        super(injector);\n    }\n\n    canActivate(): boolean {\n        if (this.loginService.authenticateModel &&\n            this.loginService.authenticateResult &&\n            this.loginService.authenticateResult.twoFactorAuthProviders &&\n            this.loginService.authenticateResult.twoFactorAuthProviders.length\n            ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    ngOnInit(): void {\n        this.selectedTwoFactorProvider = this.loginService.authenticateResult.twoFactorAuthProviders[0];\n    }\n\n    submit(): void {\n        const model = new SendTwoFactorAuthCodeModel();\n        model.userId = this.loginService.authenticateResult.userId;\n        model.provider = this.selectedTwoFactorProvider;\n\n        this.submitting = true;\n        this._tokenAuthService\n            .sendTwoFactorAuthCode(model)\n            .finally(() => this.submitting = false)\n            .subscribe(() => {\n                this._router.navigate(['account/verify-code']);\n            });\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l('VerifySecurityCode')}}\\n            </h3>\\n        </div>\\n        <form #twoFactorForm=\\\"ngForm\\\" class=\\\"m-login__form m-form verify-security-code-form\\\" method=\\\"post\\\" (ngSubmit)=\\\"submit()\\\">\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #passwordInput=\\\"ngModel\\\" autoFocus [(ngModel)]=\\\"code\\\" class=\\\"form-control form-control-solid placeholder-no-fix input-ltr\\\" type=\\\"password\\\" autocomplete=\\\"off\\\" placeholder=\\\"{{l('Code')}} *\\\" name=\\\"code\\\" required maxlength=\\\"16\\\" />\\n                <validation-messages [formCtrl]=\\\"passwordInput\\\"></validation-messages>\\n            </div>\\n\\n            <div class=\\\"form-group margin-top-20\\\">\\n                <label class=\\\"m-checkbox\\\">\\n                    <input class=\\\"form-control\\\" [(ngModel)]=\\\"loginService.authenticateModel.rememberClient\\\" type=\\\"checkbox\\\" name=\\\"rememberClient\\\" value=\\\"true\\\" />{{l(\\\"RememberThisBrowser\\\")}}\\n                    <span></span>\\n                </label>\\n            </div>\\n\\n\\n            <div class=\\\"m-login__form-action\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!twoFactorForm.form.valid\\\">{{l(\\\"Submit\\\")}}</button>\\n                <span class=\\\"remaining-time-counter\\\">{{l(\\\"RemainingTime\\\")}}: {{l(\\\"SecondShort{0}\\\", remainingSeconds)}}.</span>\\n            </div>\\n        </form>\\n    </div>\\n\\n</div>\\n\"","module.exports = \".remaining-time-counter {\\n  margin-left: 10px;\\n  color: red;\\n}\\n\"","import { Component, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport 'rxjs/add/observable/timer';\nimport { LoginService } from './login.service';\n\n@Component({\n    templateUrl: './validate-two-factor-code.component.html',\n    styleUrls: ['./validate-two-factor-code.component.less'],\n    animations: [accountModuleAnimation()]\n})\nexport class ValidateTwoFactorCodeComponent extends AppComponentBase implements CanActivate, OnInit, OnDestroy {\n\n    code: string;\n    submitting = false;\n    remainingSeconds = 90;\n    timerSubscription: Subscription;\n\n    constructor(\n        injector: Injector,\n        public loginService: LoginService,\n        private _router: Router\n    ) {\n        super(injector);\n    }\n\n    canActivate(): boolean {\n        if (this.loginService.authenticateModel &&\n            this.loginService.authenticateResult\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    ngOnInit(): void {\n        const timer = Observable.timer(1000, 1000);\n        this.timerSubscription = timer.subscribe(() => {\n            this.remainingSeconds = this.remainingSeconds - 1;\n            if (this.remainingSeconds <= 0) {\n                this.message.warn(this.l('TimeoutPleaseTryAgain')).done(() => {\n                    this.loginService.authenticateModel.twoFactorVerificationCode = null;\n                    this._router.navigate(['account/login']);\n                });\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.timerSubscription) {\n            this.timerSubscription.unsubscribe();\n            this.timerSubscription = null;\n        }\n    }\n\n    submit(): void {\n        this.loginService.authenticateModel.twoFactorVerificationCode = this.code;\n        this.loginService.authenticate();\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l(\\\"ForgotPassword\\\")}}\\n            </h3>\\n        </div>\\n        <form class=\\\"m-login__form m-form forget-form\\\" #forgotPassForm=\\\"ngForm\\\" method=\\\"post\\\" novalidate (ngSubmit)=\\\"save()\\\">\\n            <p>\\n                {{l(\\\"SendPasswordResetLink_Information\\\")}}\\n            </p>\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #emailAddressInput=\\\"ngModel\\\" [(ngModel)]=\\\"model.emailAddress\\\" autoFocus class=\\\"form-control placeholder-no-fix\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" placeholder=\\\"{{l('EmailAddress')}} *\\\" name=\\\"emailAddress\\\" required maxlength=\\\"256\\\" email />\\n                <validation-messages [formCtrl]=\\\"emailAddressInput\\\" [errorDefs]=\\\"[{email: l('InvalidEmailAddress')}]\\\"></validation-messages>\\n            </div>\\n            <div class=\\\"m-login__form-action\\\">\\n\\n                <button [disabled]=\\\"saving\\\" routerLink=\\\"/account/login\\\" type=\\\"button\\\" class=\\\"btn btn-outline-primary  m-btn m-btn--pill m-btn--custom\\\"><i class=\\\"fa fa-arrow-left\\\"></i> {{l(\\\"Back\\\")}}</button>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!forgotPassForm.form.valid\\\" [buttonBusy]=\\\"saving\\\" [busyText]=\\\"l('SavingWithThreeDot')\\\"><i class=\\\"fa fa-check\\\"></i> {{l(\\\"Submit\\\")}}</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\"","import { Component, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppUrlService } from '@shared/common/nav/app-url.service';\nimport { AccountServiceProxy, SendPasswordResetCodeInput } from '@shared/service-proxies/service-proxies';\n\n@Component({\n    templateUrl: './forgot-password.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class ForgotPasswordComponent extends AppComponentBase {\n\n    model: SendPasswordResetCodeInput = new SendPasswordResetCodeInput();\n\n    saving = false;\n\n    constructor (\n        injector: Injector,\n        private _accountService: AccountServiceProxy,\n        private _appUrlService: AppUrlService,\n        private _router: Router\n        ) {\n        super(injector);\n    }\n\n    save(): void {\n        this.saving = true;\n        this._accountService.sendPasswordResetCode(this.model)\n            .finally(() => { this.saving = false; })\n            .subscribe(() => {\n                this.message.success(this.l('PasswordResetMailSentMessage'), this.l('MailSent')).done(() => {\n                    this._router.navigate(['account/login']);\n                });\n            });\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l(\\\"ChangePassword\\\")}}\\n            </h3>\\n        </div>\\n        <form #resetPassForm=\\\"ngForm\\\" class=\\\"m-login__form\\\" method=\\\"post\\\" (ngSubmit)=\\\"save()\\\">\\n            <p>\\n                {{l(\\\"PleaseEnterYourNewPassword\\\")}}\\n            </p>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input type=\\\"password\\\" name=\\\"Password\\\" class=\\\"form-control placeholder-no-fix\\\" [(ngModel)]=\\\"model.password\\\" #Password=\\\"ngModel\\\" placeholder=\\\"{{l('Password')}}\\\" validateEqual=\\\"PasswordRepeat\\\"\\n                       reverse=\\\"true\\\" [requireDigit]=\\\"passwordComplexitySetting.requireDigit\\\" [requireLowercase]=\\\"passwordComplexitySetting.requireLowercase\\\"\\n                       [requireUppercase]=\\\"passwordComplexitySetting.requireUppercase\\\" [requireNonAlphanumeric]=\\\"passwordComplexitySetting.requireNonAlphanumeric\\\" [requiredLength]=\\\"passwordComplexitySetting.requiredLength\\\"\\n                       required>\\n            </div>\\n            <div [hidden]=\\\"resetPassForm.form.valid || resetPassForm.form.pristine\\\" class=\\\"form-group\\\">\\n                <ul class=\\\"help-block text-danger\\\" *ngIf=\\\"Password.errors\\\">\\n                    <li [hidden]=\\\"!Password.errors.requireDigit\\\">{{l(\\\"PasswordComplexity_RequireDigit_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireLowercase\\\">{{l(\\\"PasswordComplexity_RequireLowercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireUppercase\\\">{{l(\\\"PasswordComplexity_RequireUppercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireNonAlphanumeric\\\">{{l(\\\"PasswordComplexity_RequireNonAlphanumeric_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requiredLength\\\">{{l(\\\"PasswordComplexity_RequiredLength_Hint\\\", passwordComplexitySetting.requiredLength)}}</li>\\n                </ul>\\n            </div>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input type=\\\"password\\\" name=\\\"PasswordRepeat\\\" class=\\\"form-control placeholder-no-fix\\\" [ngModel]=\\\"model.passwordRepeat\\\" #PasswordRepeat=\\\"ngModel\\\" placeholder=\\\"{{l('PasswordRepeat')}}\\\" validateEqual=\\\"Password\\\"\\n                       reverse=\\\"false\\\" [requireDigit]=\\\"passwordComplexitySetting.requireDigit\\\" [requireLowercase]=\\\"passwordComplexitySetting.requireLowercase\\\"\\n                       [requireUppercase]=\\\"passwordComplexitySetting.requireUppercase\\\" [requireNonAlphanumeric]=\\\"passwordComplexitySetting.requireNonAlphanumeric\\\" [requiredLength]=\\\"passwordComplexitySetting.requiredLength\\\"\\n                       required>\\n            </div>\\n            <div [hidden]=\\\"resetPassForm.form.valid || resetPassForm.form.pristine\\\" class=\\\"form-group\\\">\\n                <ul class=\\\"help-block text-danger\\\" *ngIf=\\\"PasswordRepeat.errors\\\">\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireDigit\\\">{{l(\\\"PasswordComplexity_RequireDigit_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireLowercase\\\">{{l(\\\"PasswordComplexity_RequireLowercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireUppercase\\\">{{l(\\\"PasswordComplexity_RequireUppercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireNonAlphanumeric\\\">{{l(\\\"PasswordComplexity_RequireNonAlphanumeric_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requiredLength\\\">{{l(\\\"PasswordComplexity_RequiredLength_Hint\\\", passwordComplexitySetting.requiredLength)}}</li>\\n                    <li [hidden]=\\\"PasswordRepeat.valid\\\">{{l(\\\"PasswordsDontMatch\\\")}}</li>\\n                </ul>\\n            </div>\\n\\n            <div class=\\\"m-login__form-action\\\">\\n                <button [disabled]=\\\"saving\\\" routerLink=\\\"/account/login\\\" type=\\\"button\\\" class=\\\"btn btn-outline-primary  m-btn m-btn--pill m-btn--custom\\\"><i class=\\\"fa fa-arrow-left\\\"></i> {{l(\\\"Back\\\")}}</button>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!resetPassForm.form.valid\\\" [buttonBusy]=\\\"saving\\\" [busyText]=\\\"l('SavingWithThreeDot')\\\"><i class=\\\"fa fa-check\\\"></i> {{l(\\\"Submit\\\")}}</button>\\n            </div>\\n\\n        </form>\\n    </div>\\n</div>\\n\\n\\n\\n\"","import { Component, Injector, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppUrlService } from '@shared/common/nav/app-url.service';\nimport { AppSessionService } from '@shared/common/session/app-session.service';\nimport { AccountServiceProxy, PasswordComplexitySetting, ProfileServiceProxy, ResetPasswordOutput } from '@shared/service-proxies/service-proxies';\nimport { LoginService } from '../login/login.service';\nimport { ResetPasswordModel } from './reset-password.model';\n\n@Component({\n    templateUrl: './reset-password.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class ResetPasswordComponent extends AppComponentBase implements OnInit {\n\n    model: ResetPasswordModel = new ResetPasswordModel();\n    passwordComplexitySetting: PasswordComplexitySetting = new PasswordComplexitySetting();\n    saving = false;\n\n    constructor(\n        injector: Injector,\n        private _accountService: AccountServiceProxy,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute,\n        private _loginService: LoginService,\n        private _appUrlService: AppUrlService,\n        private _appSessionService: AppSessionService,\n        private _profileService: ProfileServiceProxy\n    ) {\n        super(injector);\n    }\n\n    ngOnInit(): void {\n        this.model.userId = this._activatedRoute.snapshot.queryParams['userId'];\n        this.model.resetCode = this._activatedRoute.snapshot.queryParams['resetCode'];\n\n        this._appSessionService.changeTenantIfNeeded(\n            this.parseTenantId(\n                this._activatedRoute.snapshot.queryParams['tenantId']\n            )\n        );\n\n        this._profileService.getPasswordComplexitySetting().subscribe(result => {\n            this.passwordComplexitySetting = result.setting;\n        });\n    }\n\n    save(): void {\n        this.saving = true;\n        this._accountService.resetPassword(this.model)\n            .finally(() => { this.saving = false; })\n            .subscribe((result: ResetPasswordOutput) => {\n                if (!result.canLogin) {\n                    this._router.navigate(['account/login']);\n                    return;\n                }\n\n                // Autheticate\n                this.saving = true;\n                this._loginService.authenticateModel.userNameOrEmailAddress = result.userName;\n                this._loginService.authenticateModel.password = this.model.password;\n                this._loginService.authenticate(() => {\n                    this.saving = false;\n                });\n            });\n    }\n\n    parseTenantId(tenantIdAsStr?: string): number {\n        let tenantId = !tenantIdAsStr ? undefined : parseInt(tenantIdAsStr);\n        if (tenantId === NaN) {\n            tenantId = undefined;\n        }\n\n        return tenantId;\n    }\n}\n","import { ResetPasswordInput } from '@shared/service-proxies/service-proxies';\n\nexport class ResetPasswordModel extends ResetPasswordInput {\n    public passwordRepeat: string;\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__head\\\">\\n        <h3 class=\\\"m-login__title\\\">\\n            {{l(\\\"PaymentInfo\\\")}}\\n        </h3>\\n    </div>\\n\\n    <form class=\\\"register-form\\\" method=\\\"post\\\" asp-action=\\\"PaymentResult\\\" id=\\\"formPaymentResult\\\">\\n        <input type=\\\"hidden\\\" name=\\\"EditionId\\\" [(ngModel)]=\\\"edition.id\\\"/>\\n        <input type=\\\"hidden\\\" name=\\\"Gateway\\\" [(ngModel)]=\\\"subscriptionPaymentGateway.Paypal\\\"/>\\n        <input type=\\\"hidden\\\" name=\\\"EditionPaymentType\\\" [(ngModel)]=\\\"editionPaymentType\\\"/>\\n\\n        <div class=\\\"text-center m--margin-bottom-20\\\">({{l(\\\"Edition\\\")}}: {{edition.displayName}})</div>\\n\\n        <div *ngIf=\\\"edition.monthlyPrice\\\" class=\\\"form-group\\\">\\n            <label class=\\\"m-radio\\\">\\n                <input class=\\\"form-control\\\" type=\\\"radio\\\" name=\\\"PaymentPeriodType\\\"\\n                       checked\\n                       [value]=\\\"paymentPeriodType.Monthly\\\"\\n                       (change)=\\\"onPaymentPeriodChangeChange(paymentPeriodType.Monthly)\\\"/>{{l(\\\"MonthlyPrice\\\")}}: ${{edition.monthlyPrice | number : '1.2-2'}}\\n                <span></span>\\n            </label>\\n        </div>\\n\\n        <div *ngIf=\\\"edition.annualPrice\\\" class=\\\"form-group\\\">\\n            <label class=\\\"m-radio\\\">\\n                <input class=\\\"form-control\\\" type=\\\"radio\\\" name=\\\"PaymentPeriodType\\\"\\n                       [value]=\\\"paymentPeriodType.Annual\\\"\\n                       (change)=\\\"onPaymentPeriodChangeChange(paymentPeriodType.Annual)\\\"/>{{l(\\\"AnnualPrice\\\")}}: ${{edition.annualPrice | number : '1.2-2'}}\\n                <span></span>\\n            </label>\\n        </div>\\n\\n        <paymentGateways [(edition)]=\\\"edition\\\" [(paymentPeriodType)]=\\\"selectedPaymentPeriodType\\\" [(editionPaymentType)]=\\\"editionPaymentType\\\"></paymentGateways>\\n    </form>\\n</div>\\n\"","import { Component, ComponentFactoryResolver, Injector, OnInit, ViewContainerRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EditionPaymentType, PaymentPeriodType, SubscriptionPaymentGatewayType } from '@shared/AppEnums';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { EditionSelectDto, PaymentServiceProxy, TenantRegistrationServiceProxy } from '@shared/service-proxies/service-proxies';\n\n@Component({\n    templateUrl: './buy.component.html',\n    animations: [accountModuleAnimation()]\n})\n\nexport class BuyComponent extends AppComponentBase implements OnInit {\n\n    editionPaymentType: EditionPaymentType;\n    edition: EditionSelectDto = new EditionSelectDto();\n    tenantId: number = abp.session.tenantId;\n    paymentPeriodType = PaymentPeriodType;\n    subscriptionPaymentGateway = SubscriptionPaymentGatewayType;\n    selectedPaymentPeriodType: PaymentPeriodType = PaymentPeriodType.Monthly;\n\n    constructor(\n        injector: Injector,\n        private _activatedRoute: ActivatedRoute,\n        private _router: Router,\n        private _paymentAppService: PaymentServiceProxy,\n        private _tenantRegistrationService: TenantRegistrationServiceProxy,\n        private vcRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver\n    ) {\n        super(injector);\n    }\n\n    ngOnInit(): void {\n        this.editionPaymentType = parseInt(this._activatedRoute.snapshot.queryParams['editionPaymentType']);\n        const editionId = this._activatedRoute.snapshot.queryParams['editionId'];\n\n        this._tenantRegistrationService.getEdition(editionId)\n            .subscribe((result: EditionSelectDto) => {\n                this.edition = result;\n            });\n    }\n\n    onPaymentPeriodChangeChange(selectedPaymentPeriodType) {\n        this.selectedPaymentPeriodType = selectedPaymentPeriodType;\n    }\n}\n","module.exports = \"<paypal-component [(edition)]='edition' [(selectedPaymentPeriodType)]='paymentPeriodType' [(editionPaymentType)]='editionPaymentType'></paypal-component>\\n\"","import { Component, Input } from '@angular/core';\nimport { EditionPaymentType, PaymentPeriodType } from '@shared/AppEnums';\nimport { EditionSelectDto } from '@shared/service-proxies/service-proxies';\n\n@Component({\n    selector: 'paymentGateways',\n    templateUrl: './payment-gateways.component.html',\n})\nexport class PaymentGatewaysComponent {\n    @Input() edition: EditionSelectDto = null;\n    @Input() paymentPeriodType: PaymentPeriodType = null;\n    @Input() editionPaymentType: EditionPaymentType = null;\n}\n","module.exports = \"<input type=\\\"hidden\\\" name=\\\"PaymentId\\\" value=\\\"\\\" />\\n<input type=\\\"hidden\\\" name=\\\"PayerId\\\" value=\\\"\\\" />\\n\\n<div *ngIf=\\\"demoUsername\\\" class=\\\"m-alert m-alert--icon m-alert--icon-solid m-alert--outline alert alert-brand alert-dismissible fade show\\\" role=\\\"alert\\\">\\n    <div class=\\\"m-alert__icon\\\">\\n        <i class=\\\"flaticon-exclamation\\\"></i>\\n        <span></span>\\n    </div>\\n    <div class=\\\"m-alert__text\\\">\\n        <h4>\\n            {{l(\\\"DemoPayPalAccount\\\")}}\\n        </h4>\\n        <p>\\n            <span>{{l(\\\"UserName\\\")}}: <strong>{{demoUsername}}</strong></span><br />\\n            <span>{{l(\\\"Password\\\")}}: <strong>{{demoPassword}}</strong></span>\\n        </p>\\n    </div>\\n</div>\\n\\n<div id=\\\"paypal-button\\\"></div>\\n<div [busyIf]=\\\"paypalIsLoading\\\" *ngIf=\\\"paypalIsLoading\\\"></div>\\n\"","import { Component, Input, Injector, } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppSessionService } from '@shared/common/session/app-session.service';\nimport { AppComponentBase } from '@shared/common/app-component-base';\n\nimport {\n    EditionSelectDto,\n    CreatePaymentDto,\n    ExecutePaymentDto,\n    CreatePaymentDtoPaymentPeriodType,\n    CreatePaymentDtoEditionPaymentType,\n    ExecutePaymentDtoPaymentPeriodType,\n    ExecutePaymentDtoEditionPaymentType,\n    PaymentServiceProxy\n} from '@shared/service-proxies/service-proxies';\n\nimport {\n    PaymentPeriodType,\n    SubscriptionPaymentGatewayType,\n    SubscriptionStartType,\n    EditionPaymentType\n} from '@shared/AppEnums';\n\n@Component({\n    selector: 'paypal-component',\n    templateUrl: './paypal.component.html'\n})\n\nexport class PayPalComponent extends AppComponentBase {\n\n    @Input() selectedPaymentPeriodType: PaymentPeriodType = PaymentPeriodType.Monthly;\n    @Input() editionPaymentType: EditionPaymentType;\n\n    _edition: EditionSelectDto = new EditionSelectDto();\n\n    demoUsername = '';\n    demoPassword = '';\n\n    @Input()\n    get edition() {\n        return this._edition;\n    }\n\n    set edition(val: EditionSelectDto) {\n        this._edition = val;\n        if (val && val.id) {\n            jQuery.getScript('https://www.paypalobjects.com/api/checkout.js').done(() => {\n                this.paypalIsLoading = false;\n                this.preparePaypalButton();\n\n                this.demoUsername = this.getAdditionalData('DemoUsername');\n                this.demoPassword = this.getAdditionalData('DemoPassword');\n            });\n        }\n    }\n\n    paypalIsLoading = true;\n    subscriptionPaymentGateway = SubscriptionPaymentGatewayType;\n    subscriptionStartType = SubscriptionStartType;\n\n    constructor(\n        injector: Injector,\n        private _paymentAppService: PaymentServiceProxy,\n        private _appSessionService: AppSessionService,\n        private _router: Router\n    ) {\n        super(injector);\n    }\n\n    getAdditionalData(key: string): string {\n        return this._edition.additionalData['paypal'][key];\n    }\n\n    setAdditionalData(key: string, value: string): string {\n        return this._edition.additionalData['paypal'][key] = value;\n    }\n\n    preparePaypalButton(): void {\n\n        const self = this;\n        (<any>window).paypal.Button.render({\n            style: { size: 'responsive' },\n            env: this.getAdditionalData('Environment'),\n            commit: true,\n            payment() {\n                const input = new CreatePaymentDto();\n                input.editionId = self.edition.id;\n                input.editionPaymentType = <CreatePaymentDtoEditionPaymentType>(self.editionPaymentType);\n                input.subscriptionPaymentGatewayType = self.subscriptionPaymentGateway.Paypal;\n                input.paymentPeriodType = <CreatePaymentDtoPaymentPeriodType>(self.selectedPaymentPeriodType);\n                return self._paymentAppService\n                    .createPayment(input).toPromise()\n                    .then((result: any) => {\n                        return result.id;\n                    });\n            },\n\n            onAuthorize(data) {\n                const input = new ExecutePaymentDto();\n\n                input.gateway = self.subscriptionPaymentGateway.Paypal;\n                input.paymentPeriodType = <ExecutePaymentDtoPaymentPeriodType>(self.selectedPaymentPeriodType);\n                input.editionId = self.edition.id;\n                input.editionPaymentType = <ExecutePaymentDtoEditionPaymentType>(self.editionPaymentType);\n\n                self.setAdditionalData('PaymentId', data.paymentID);\n                self.setAdditionalData('PayerId', data.payerID);\n                input.additionalData = self._edition.additionalData.paypal;\n\n                self._paymentAppService\n                    .executePayment(input)\n                    .toPromise().then((result: ExecutePaymentDto) => {\n                        if (self._appSessionService.userId) {\n                            self._router.navigate(['app/admin/subscription-management']);\n                        } else {\n                            self._router.navigate(['account/register-tenant'], {\n                                queryParams: {\n                                    editionId: self._edition.id,\n                                    subscriptionStartType: self.subscriptionStartType.Paid,\n                                    gateway: self.subscriptionPaymentGateway.Paypal,\n                                    paymentId: data.paymentID\n                                }\n                            });\n                        }\n                        return;\n                    });\n\n            }\n        }, '#paypal-button');\n\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__head\\\">\\n        <h3 class=\\\"m-login__title\\\">\\n            {{l(\\\"PaymentInfo\\\")}}\\n        </h3>\\n    </div>\\n\\n    <form class=\\\"register-form\\\" method=\\\"post\\\" asp-action=\\\"PaymentResult\\\" id=\\\"formPaymentResult\\\">\\n        <input type=\\\"hidden\\\" name=\\\"EditionId\\\" [(ngModel)]=\\\"edition.id\\\"/>\\n        <input type=\\\"hidden\\\" name=\\\"Gateway\\\" [(ngModel)]=\\\"subscriptionPaymentGateway.Paypal\\\"/>\\n        <input type=\\\"hidden\\\" name=\\\"EditionPaymentType\\\" [(ngModel)]=\\\"editionPaymentType\\\"/>\\n\\n        <div *ngIf=\\\"editionPaymentType == editionPaymentTypeCheck.Extend\\\" class=\\\"text-center\\\">{{l(\\\"Extend_Edition_Description\\\",edition.displayName)}}</div>\\n        <div *ngIf=\\\"editionPaymentType == editionPaymentTypeCheck.Upgrade\\\" class=\\\"text-center m--margin-bottom-20\\\">{{l(\\\"Upgrade_Edition_Description\\\",edition.displayName)}}</div>\\n\\n        <div *ngIf=\\\"!isUpgrade()\\\" class=\\\"form-group\\\">\\n            <label class=\\\"m-radio\\\">\\n                <input class=\\\"form-control\\\" type=\\\"radio\\\" name=\\\"PaymentPeriodType\\\"\\n                       checked\\n                       [value]=\\\"paymentPeriodType.Monthly\\\"\\n                       (change)=\\\"onPaymentPeriodChangeChange(paymentPeriodType.Monthly)\\\"/>{{l(\\\"MonthlyPrice\\\")}}: ${{edition.monthlyPrice | number : '1.2-2'}}\\n                <span></span>\\n            </label>\\n        </div>\\n\\n        <div *ngIf=\\\"!isUpgrade()\\\" class=\\\"form-group\\\">\\n            <label class=\\\"m-radio\\\">\\n                <input class=\\\"form-control\\\" type=\\\"radio\\\" name=\\\"PaymentPeriodType\\\"\\n                       [value]=\\\"paymentPeriodType.Annual\\\"\\n                       (change)=\\\"onPaymentPeriodChangeChange(paymentPeriodType.Annual)\\\"/>{{l(\\\"AnnualPrice\\\")}}: ${{edition.annualPrice | number : '1.2-2'}}\\n                <span></span>\\n            </label>\\n        </div>\\n\\n        <hr *ngIf=\\\"isUpgrade()\\\"/>\\n\\n        <div *ngIf=\\\"isUpgrade()\\\" class=\\\"form-actions\\\">\\n            <div class=\\\"form-group row\\\">\\n                <label class=\\\"col-sm-8 control-label\\\">{{l(\\\"Total\\\")}}</label>\\n                <div class=\\\"col-sm-4 text-right\\\">\\n                    <p class=\\\"m--font-bold\\\" id=\\\"totalPrice\\\">\\n                        {{additionalPrice}}\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <paymentGateways [(edition)]=\\\"edition\\\" [(paymentPeriodType)]=\\\"selectedPaymentPeriodType\\\" [(editionPaymentType)]=\\\"editionPaymentType\\\"></paymentGateways>\\n    </form>\\n</div>\\n\"","import { Component, Injector, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { EditionPaymentType, PaymentPeriodType, SubscriptionPaymentGatewayType } from '@shared/AppEnums';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { EditionSelectDto, PaymentInfoDto, PaymentServiceProxy, TenantRegistrationServiceProxy } from '@shared/service-proxies/service-proxies';\n\n@Component({\n    templateUrl: './upgrade-or-extend.component.html',\n    animations: [accountModuleAnimation()]\n})\n\nexport class UpgradeOrExtendComponent extends AppComponentBase implements OnInit {\n\n    editionPaymentType: EditionPaymentType;\n    edition: EditionSelectDto = new EditionSelectDto();\n    tenantId: number = abp.session.tenantId;\n    paymentPeriodType = PaymentPeriodType;\n    subscriptionPaymentGateway = SubscriptionPaymentGatewayType;\n    selectedPaymentPeriodType: PaymentPeriodType = PaymentPeriodType.Monthly;\n    additionalPrice: number;\n\n    editionPaymentTypeCheck: typeof EditionPaymentType = EditionPaymentType;\n\n    constructor(\n        injector: Injector,\n        private _activatedRoute: ActivatedRoute,\n        private _paymentAppService: PaymentServiceProxy,\n        private _tenantRegistrationService: TenantRegistrationServiceProxy\n    ) {\n        super(injector);\n    }\n\n    ngOnInit(): void {\n        this.editionPaymentType = parseInt(this._activatedRoute.snapshot.queryParams['editionPaymentType']);\n        const upgradeEditionId = this._activatedRoute.snapshot.queryParams['upgradeEditionId'];\n\n        this._paymentAppService.getPaymentInfo(upgradeEditionId)\n            .subscribe((result: PaymentInfoDto) => {\n                this.edition = result.edition;\n                this.additionalPrice = Number(result.additionalPrice.toFixed(2));\n            });\n    }\n\n    onPaymentPeriodChangeChange(selectedPaymentPeriodType) {\n        this.selectedPaymentPeriodType = selectedPaymentPeriodType;\n    }\n\n    isUpgrade(): boolean {\n        return this.additionalPrice > 0;\n    }\n}\n","module.exports = \"/* Cubic Bezier Transition */\\n/***\\nPricing Table 1\\n***/\\n.pricing-content-1 {\\n    background-color: #fff;\\n}\\n.pricing-content-1:before, .pricing-content-1:after {\\n        content: \\\" \\\";\\n        display: table;\\n    }\\n.pricing-content-1:after {\\n        clear: both;\\n    }\\n.pricing-content-1 .arrow-down {\\n        width: 0;\\n        height: 0;\\n        border-left: 15px solid transparent;\\n        border-right: 15px solid transparent;\\n        border-top: 15px solid;\\n        margin: auto;\\n    }\\n.pricing-content-1 .arrow-down.arrow-blue {\\n            border-top-color: #3598DC;\\n        }\\n.pricing-content-1 .arrow-down.arrow-green {\\n            border-top-color: #32C5D2;\\n        }\\n.pricing-content-1 .arrow-down.arrow-dark {\\n            border-top-color: #2F353B;\\n        }\\n.pricing-content-1 .arrow-down.arrow-grey {\\n            border-top-color: #f7f9fb;\\n        }\\n.pricing-content-1 .price-ribbon {\\n        position: absolute;\\n        top: 75px;\\n        right: -4px;\\n        width: 90px;\\n        font-size: 14px;\\n        text-transform: uppercase;\\n        font-weight: 300;\\n        padding: 6px 20px 6px 15px;\\n        color: #fff;\\n        background-color: #D91E18;\\n        text-shadow: 0px 1px 2px #bbb;\\n        box-shadow: 0px 2px 4px #888;\\n    }\\n.pricing-content-1 .price-ribbon:after {\\n            content: ' ';\\n            position: absolute;\\n            width: 0;\\n            height: 0;\\n            right: 0px;\\n            top: 100%;\\n            border-width: 5px 10px;\\n            border-style: solid;\\n            border-color: #64120f transparent transparent #64120f;\\n        }\\n.pricing-content-1 .pricing-title {\\n        border-bottom: 1px solid;\\n        border-color: #fff;\\n    }\\n.pricing-content-1 .pricing-title > h1 {\\n            margin: 20px 0;\\n        }\\n.pricing-content-1 .price-column-container {\\n        text-align: center;\\n        margin: 0;\\n        background-color: #fff;\\n    }\\n.pricing-content-1 .price-column-container.border-active {\\n            border: 1px solid #e5e9ee;\\n        }\\n.pricing-content-1 .price-column-container:first-child {\\n            margin-left: 0;\\n        }\\n.pricing-content-1 .price-column-container:last-child {\\n            margin-right: 0;\\n        }\\n.pricing-content-1 .price-table-head {\\n        color: #fff;\\n        padding: 20px 0;\\n    }\\n.pricing-content-1 .price-table-head h2 {\\n            font-size: 26px;\\n        }\\n.pricing-content-1 .price-table-head.price-1 {\\n            background-color: #3598DC;\\n        }\\n.pricing-content-1 .price-table-head.price-2 {\\n            background-color: #32C5D2;\\n        }\\n.pricing-content-1 .price-table-head.price-3 {\\n            background-color: #2F353B;\\n        }\\n.pricing-content-1 .price-table-pricing > h3 {\\n        font-size: 60px;\\n        position: relative;\\n    }\\n.pricing-content-1 .price-table-pricing > h3 > .price-sign {\\n            font-size: 24px;\\n            position: absolute;\\n            margin-left: -15px;\\n        }\\n.pricing-content-1 .price-table-pricing > p {\\n        margin-top: 0;\\n    }\\n.pricing-content-1 .price-table-content {\\n        background-color: #f7f9fb;\\n        color: #5c6d7e;\\n        font-weight: 600;\\n        font-size: 16px;\\n    }\\n.pricing-content-1 .price-table-content .row {\\n            padding-top: 10px;\\n            padding-bottom: 10px;\\n        }\\n.pricing-content-1 .price-table-content .row i {\\n                color: #6cade6;\\n            }\\n.pricing-content-1 .price-table-content .row:first-child {\\n                padding-top: 20px;\\n            }\\n.pricing-content-1 .price-table-content .row:last-child {\\n                padding-bottom: 20px;\\n            }\\n.pricing-content-1 .price-table-footer {\\n        padding: 20px 0;\\n    }\\n.pricing-content-1 .price-table-footer > .price-button {\\n            font-weight: bold;\\n            padding: 10px 20px;\\n        }\\n@media (max-width: 1024px) {\\n    .pricing-content-1 .mobile-padding {\\n        padding: 0;\\n        margin: 0;\\n    }\\n\\n        .pricing-content-1 .mobile-padding > i {\\n            margin-right: 5px;\\n        }\\n\\n    .pricing-content-1 .price-table-content {\\n        padding-left: 10px;\\n        padding-right: 10px;\\n    }\\n}\\n@media (max-width: 1024px) {\\n    .pricing-content-1 .mobile-padding {\\n        padding: 0 15px;\\n        margin: 0 -15px;\\n    }\\n\\n        .pricing-content-1 .mobile-padding > i {\\n            margin-right: 20px;\\n        }\\n\\n    .pricing-content-1 .price-table-content {\\n        padding-left: 15px;\\n        padding-right: 15px;\\n    }\\n}\\n/***\\nPricing Table 2\\n***/\\n.pricing-content-2 {\\n    background-color: #fff;\\n}\\n.pricing-content-2 .no-padding {\\n        padding: 0;\\n    }\\n.pricing-content-2 .text-left {\\n        text-align: left;\\n    }\\n.pricing-content-2 .text-right {\\n        text-align: right;\\n    }\\n.pricing-content-2.pricing-bg-dark {\\n        background-color: #2F353B;\\n    }\\n.pricing-content-2 .pricing-title {\\n        border-color: #444;\\n    }\\n.pricing-content-2 .pricing-title > h1 {\\n            color: #fff;\\n        }\\n.pricing-content-2 .pricing-table-container {\\n        padding-top: 40px;\\n        padding-bottom: 40px;\\n    }\\n.pricing-content-2 .pricing-table-container .padding-fix {\\n            padding-left: 15px;\\n            padding-right: 15px;\\n        }\\n.pricing-content-2 .pricing-table-container .price-column-container {\\n            background-color: #fff;\\n            margin: 30px 0;\\n            padding: 60px 0;\\n            text-align: center;\\n            border-bottom: 4px solid #ccc;\\n        }\\n.pricing-content-2 .pricing-table-container .price-column-container.border-right {\\n                border-right: 1px solid #ccc;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container.border-left {\\n                border-left: 1px solid #ccc;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container.border-top {\\n                border-top: 1px solid #ccc;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container.featured-price {\\n                margin: 0;\\n                padding: 89px 0;\\n                border: 1px solid;\\n                border-bottom: 4px solid;\\n                border-color: #ccc;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container.featured-price > .price-feature-label {\\n                    position: absolute;\\n                    top: 0;\\n                    left: 50%;\\n                    display: inline-block;\\n                    width: 110px;\\n                    margin: 0 0 0 -60px;\\n                    padding: 7px 15px;\\n                    color: #fff;\\n                    font-weight: 300;\\n                }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-head > h2 {\\n                letter-spacing: 1px;\\n                font-weight: 600;\\n                font-size: 18px;\\n                color: #ACB5C3;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-head > h2.opt-pricing-5 {\\n                    padding: 7px 15px;\\n                    display: inline;\\n                    margin: 0 auto 20px auto;\\n                    font-size: 16px;\\n                }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-pricing > h3 {\\n                font-size: 60px;\\n                position: relative;\\n                font-weight: 600;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-pricing > h3 > .price-sign {\\n                    font-size: 24px;\\n                    position: absolute;\\n                    margin-left: -15px;\\n                }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-pricing > p {\\n                margin-top: 0;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-content {\\n                color: #333;\\n                font-weight: 300;\\n                font-size: 16px;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-content .row {\\n                    padding-top: 20px;\\n                    padding-bottom: 20px;\\n                    border-bottom: 1px solid;\\n                    border-color: #eee;\\n                }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-content .row:first-child {\\n                        border-top: 1px solid;\\n                        border-color: #eee;\\n                    }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-footer {\\n                padding: 40px 0 0 0;\\n            }\\n.pricing-content-2 .pricing-table-container .price-column-container > .price-table-footer > .featured-price {\\n                    font-size: 20px;\\n                    font-weight: 300;\\n                    border-bottom: 3px solid #3FABA4;\\n                }\\n@media (max-width: 991px) {\\n    .pricing-content-2 .price-column-container {\\n        border-left: 1px solid;\\n        border-right: 1px solid;\\n        border-color: #ccc;\\n    }\\n}\\n\"","module.exports = \"<div [@routerTransition]>\\n    <h4>{{l(\\\"SuccessfullyRegistered\\\")}}</h4>\\n    <ul>\\n        <li><span class=\\\"text-muted\\\">{{l(\\\"TenancyName\\\")}}:</span> {{model.tenancyName}}</li>\\n        <li><span class=\\\"text-muted\\\">{{l(\\\"Name\\\")}}:</span> {{model.name}}</li>\\n        <li><span class=\\\"text-muted\\\">{{l(\\\"UserName\\\")}}:</span> {{model.userName}}</li>\\n        <li><span class=\\\"text-muted\\\">{{l(\\\"EmailAddress\\\")}}:</span> {{model.emailAddress}}</li>\\n    </ul>\\n    <div>\\n        <div *ngIf=\\\"model.isEmailConfirmationRequired\\\" class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\n            {{l(\\\"ConfirmationMailSentPleaseClickLinkInTheEmail\\\", model.emailAddress)}}\\n        </div>\\n        <div *ngIf=\\\"!model.isActive\\\" class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\n            {{l(\\\"YourAccountIsWaitingToBeActivatedByAdmin\\\")}}\\n        </div>\\n        <div *ngIf=\\\"tenantUrl\\\" class=\\\"alert alert-info\\\" role=\\\"alert\\\">\\n            {{l(\\\"TenantRegistrationLoginInfo\\\")}}<br />\\n            <a href=\\\"{{tenantUrl}}\\\">{{tenantUrl}}</a>\\n        </div>\\n    </div>\\n</div>\"","import { Component, Injector, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppUrlService } from '@shared/common/nav/app-url.service';\nimport { RegisterTenantOutput } from '@shared/service-proxies/service-proxies';\nimport { TenantRegistrationHelperService } from './tenant-registration-helper.service';\n\n@Component({\n    templateUrl: './register-tenant-result.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class RegisterTenantResultComponent extends AppComponentBase implements OnInit {\n\n    model: RegisterTenantOutput = new RegisterTenantOutput();\n    tenantUrl: string;\n\n    saving = false;\n\n    constructor(\n        injector: Injector,\n        private _router: Router,\n        private _appUrlService: AppUrlService,\n        private _tenantRegistrationHelper: TenantRegistrationHelperService\n    ) {\n        super(injector);\n    }\n\n    ngOnInit() {\n        if (!this._tenantRegistrationHelper.registrationResult) {\n            this._router.navigate(['account/login']);\n            return;\n        }\n\n        this.model = this._tenantRegistrationHelper.registrationResult;\n        abp.multiTenancy.setTenantIdCookie(this.model.tenantId);\n        this.tenantUrl = this._appUrlService.getAppRootUrlOfTenant(this.model.tenancyName);\n    }\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l(\\\"TenantSignUp\\\")}}\\n            </h3>\\n        </div>\\n\\n        <div *ngIf=\\\"model.edition\\\" class=\\\"hint text-center\\\">({{l(\\\"Edition\\\")}}: {{model.edition.displayName}})</div>\\n\\n        <form #registerForm=\\\"ngForm\\\" role=\\\"form\\\" novalidate (submit)=\\\"save()\\\" class=\\\"m-login__form m-form register-form\\\">\\n            <h4 class=\\\"m-login__title m--margin-top-20\\\">\\n                {{l(\\\"TenantInformations\\\")}}\\n            </h4>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #tenancyName=\\\"ngModel\\\" class=\\\"form-control\\\" autoFocus type=\\\"text\\\" placeholder=\\\"{{l('TenancyName')}} *\\\" [(ngModel)]=\\\"model.tenancyName\\\" name=\\\"tenancyName\\\" required maxlength=\\\"64\\\" pattern=\\\"^[a-zA-Z][a-zA-Z0-9_-]{1,}$\\\" />\\n                <div *ngIf=\\\"!tenancyName.valid && !tenancyName.pristine\\\">\\n                    <span class=\\\"help-block text-danger\\\">{{l(\\\"TenantName_Regex_Description\\\")}}</span>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #nameInput=\\\"ngModel\\\" class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"{{l('Name')}} *\\\" [(ngModel)]=\\\"model.name\\\" name=\\\"Name\\\" required maxlength=\\\"128\\\" />\\n                <validation-messages [formCtrl]=\\\"nameInput\\\"></validation-messages>\\n            </div>\\n\\n            <h4 class=\\\"m-login__title m--margin-top-20\\\">\\n                {{l(\\\"AccountSettings\\\")}}\\n            </h4>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #adminEmailAddressInput=\\\"ngModel\\\" class=\\\"form-control\\\" type=\\\"email\\\" placeholder=\\\"{{l('AdminEmailAddress')}} *\\\" [(ngModel)]=\\\"model.adminEmailAddress\\\" name=\\\"adminEmailAddress\\\" required maxlength=\\\"256\\\" email />\\n                <validation-messages [formCtrl]=\\\"adminEmailAddressInput\\\" [errorDefs]=\\\"[{email: l('InvalidEmailAddress')}]\\\"></validation-messages>\\n            </div>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input type=\\\"password\\\" name=\\\"Password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.adminPassword\\\" #Password=\\\"ngModel\\\" placeholder=\\\"{{l('AdminPassword')}}\\\" validateEqual=\\\"PasswordRepeat\\\"\\n                       reverse=\\\"true\\\" [requireDigit]=\\\"passwordComplexitySetting.requireDigit\\\" [requireLowercase]=\\\"passwordComplexitySetting.requireLowercase\\\"\\n                       [requireUppercase]=\\\"passwordComplexitySetting.requireUppercase\\\" [requireNonAlphanumeric]=\\\"passwordComplexitySetting.requireNonAlphanumeric\\\" [requiredLength]=\\\"passwordComplexitySetting.requiredLength\\\"\\n                       required>\\n            </div>\\n            <div [hidden]=\\\"registerForm.form.valid || registerForm.form.pristine\\\" class=\\\"form-group m-form__group\\\">\\n                <ul class=\\\"help-block text-danger\\\" *ngIf=\\\"Password.errors\\\">\\n                    <li [hidden]=\\\"!Password.errors.requireDigit\\\">{{l(\\\"PasswordComplexity_RequireDigit_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireLowercase\\\">{{l(\\\"PasswordComplexity_RequireLowercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireUppercase\\\">{{l(\\\"PasswordComplexity_RequireUppercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireNonAlphanumeric\\\">{{l(\\\"PasswordComplexity_RequireNonAlphanumeric_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requiredLength\\\">{{l(\\\"PasswordComplexity_RequiredLength_Hint\\\", passwordComplexitySetting.requiredLength)}}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input type=\\\"password\\\" name=\\\"PasswordRepeat\\\" class=\\\"form-control\\\" [ngModel]=\\\"model.passwordRepeat\\\" #PasswordRepeat=\\\"ngModel\\\" placeholder=\\\"{{l('PasswordRepeat')}}\\\" validateEqual=\\\"Password\\\"\\n                       reverse=\\\"false\\\" [requireDigit]=\\\"passwordComplexitySetting.requireDigit\\\" [requireLowercase]=\\\"passwordComplexitySetting.requireLowercase\\\" [requireUppercase]=\\\"passwordComplexitySetting.requireUppercase\\\"\\n                       [requireNonAlphanumeric]=\\\"passwordComplexitySetting.requireNonAlphanumeric\\\" [requiredLength]=\\\"passwordComplexitySetting.requiredLength\\\"\\n                       required>\\n            </div>\\n\\n            <div [hidden]=\\\"registerForm.form.valid || registerForm.form.pristine\\\" class=\\\"form-group m-form__group\\\">\\n                <ul class=\\\"help-block text-danger\\\" *ngIf=\\\"PasswordRepeat.errors\\\">\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireDigit\\\">{{l(\\\"PasswordComplexity_RequireDigit_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireLowercase\\\">{{l(\\\"PasswordComplexity_RequireLowercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireUppercase\\\">{{l(\\\"PasswordComplexity_RequireUppercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireNonAlphanumeric\\\">{{l(\\\"PasswordComplexity_RequireNonAlphanumeric_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requiredLength\\\">{{l(\\\"PasswordComplexity_RequiredLength_Hint\\\", passwordComplexitySetting.requiredLength)}}</li>\\n                    <li [hidden]=\\\"PasswordRepeat.valid\\\">{{l(\\\"PasswordsDontMatch\\\")}}</li>\\n                </ul>\\n            </div>\\n            <h4 *ngIf=\\\"useCaptcha\\\" class=\\\"m-login__title m--margin-top-20\\\">\\n                {{l(\\\"Captha_Hint\\\")}}\\n            </h4>\\n\\n            <div *ngIf=\\\"useCaptcha\\\" class=\\\"form-group m--margin-bottom-20\\\">\\n                <re-captcha (resolved)=\\\"captchaResolved($event)\\\" [siteKey]=\\\"recaptchaSiteKey\\\"></re-captcha>\\n            </div>\\n\\n            <div class=\\\"m-login__form-action\\\">\\n                <button [disabled]=\\\"saving\\\" routerLink=\\\"/account/login\\\" type=\\\"button\\\" class=\\\"btn btn-outline-primary  m-btn m-btn--pill m-btn--custom\\\"><i class=\\\"fa fa-arrow-left\\\"></i> {{l(\\\"Back\\\")}}</button>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!registerForm.form.valid\\\" [buttonBusy]=\\\"saving\\\" [busyText]=\\\"l('SavingWithThreeDot')\\\"><i class=\\\"fa fa-check\\\"></i> {{l(\\\"Submit\\\")}}</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\"","import { AfterViewInit, Component, Injector, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AppConsts } from '@shared/AppConsts';\nimport { PaymentPeriodType, SubscriptionPaymentGatewayType, SubscriptionStartType } from '@shared/AppEnums';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { EditionSelectDto, PasswordComplexitySetting, PaymentServiceProxy, ProfileServiceProxy, RegisterTenantOutput, TenantRegistrationServiceProxy } from '@shared/service-proxies/service-proxies';\nimport { RegisterTenantModel } from './register-tenant.model';\nimport { TenantRegistrationHelperService } from './tenant-registration-helper.service';\n\n@Component({\n    templateUrl: './register-tenant.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class RegisterTenantComponent extends AppComponentBase implements OnInit, AfterViewInit {\n\n    model: RegisterTenantModel = new RegisterTenantModel();\n    passwordComplexitySetting: PasswordComplexitySetting = new PasswordComplexitySetting();\n    subscriptionStartType = SubscriptionStartType;\n    paymentPeriodType = PaymentPeriodType;\n    selectedPaymentPeriodType: PaymentPeriodType = PaymentPeriodType.Monthly;\n    subscriptionPaymentGateway = SubscriptionPaymentGatewayType;\n    paymentId = '';\n    recaptchaSiteKey: string = AppConsts.recaptchaSiteKey;\n\n    saving = false;\n\n    constructor(\n        injector: Injector,\n        private _tenantRegistrationService: TenantRegistrationServiceProxy,\n        private _router: Router,\n        private _profileService: ProfileServiceProxy,\n        private _tenantRegistrationHelper: TenantRegistrationHelperService,\n        private _activatedRoute: ActivatedRoute,\n        private _paymentService: PaymentServiceProxy\n    ) {\n        super(injector);\n    }\n\n    ngOnInit() {\n        this.model.editionId = this._activatedRoute.snapshot.queryParams['editionId'];\n        if (this.model.editionId) {\n            this.model.subscriptionStartType = this._activatedRoute.snapshot.queryParams['subscriptionStartType'];\n            this.model.gateway = this._activatedRoute.snapshot.queryParams['gateway'];\n            this.model.paymentId = this._activatedRoute.snapshot.queryParams['paymentId'];\n        }\n\n        //Prevent to create tenant in a tenant context\n        if (this.appSession.tenant != null) {\n            this._router.navigate(['account/login']);\n            return;\n        }\n\n        this._profileService.getPasswordComplexitySetting().subscribe(result => {\n            this.passwordComplexitySetting = result.setting;\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.model.editionId) {\n            this._tenantRegistrationService.getEdition(this.model.editionId)\n                .subscribe((result: EditionSelectDto) => {\n                    this.model.edition = result;\n                });\n        }\n    }\n\n    get useCaptcha(): boolean {\n        return this.setting.getBoolean('App.TenantManagement.UseCaptchaOnRegistration');\n    }\n\n    save(): void {\n        if (this.useCaptcha && !this.model.captchaResponse) {\n            this.message.warn(this.l('CaptchaCanNotBeEmpty'));\n            return;\n        }\n\n        this.saving = true;\n        this._tenantRegistrationService.registerTenant(this.model)\n            .finally(() => { this.saving = false; })\n            .subscribe((result: RegisterTenantOutput) => {\n                this.notify.success(this.l('SuccessfullyRegistered'));\n\n                this._tenantRegistrationHelper.registrationResult = result;\n                this._router.navigate(['account/register-tenant-result']);\n            });\n    }\n\n    captchaResolved(captchaResponse: string): void {\n        this.model.captchaResponse = captchaResponse;\n    }\n\n    onPaymentPeriodChangeChange(selectedPaymentPeriodType) {\n        this.selectedPaymentPeriodType = selectedPaymentPeriodType;\n    }\n}\n","import { EditionSelectDto, RegisterTenantInput } from '@shared/service-proxies/service-proxies';\n\nexport class RegisterTenantModel extends RegisterTenantInput {\n    public passwordRepeat: string;\n    public edition: EditionSelectDto;\n}\n","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-login__signin\\\">\\n        <div class=\\\"m-login__head\\\">\\n            <h3 class=\\\"m-login__title\\\">\\n                {{l(\\\"SignUp\\\")}}\\n            </h3>\\n        </div>\\n        <form #registerForm=\\\"ngForm\\\" class=\\\"m-login__form\\\" method=\\\"post\\\" novalidate (ngSubmit)=\\\"save()\\\">\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #nameInput=\\\"ngModel\\\" class=\\\"form-control\\\" autoFocus type=\\\"text\\\" placeholder=\\\"{{l('Name')}} *\\\" [(ngModel)]=\\\"model.name\\\" name=\\\"Name\\\" required maxlength=\\\"32\\\" />\\n                <validation-messages [formCtrl]=\\\"nameInput\\\"></validation-messages>\\n            </div>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #surnameInput=\\\"ngModel\\\" class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"{{l('Surname')}} *\\\" [(ngModel)]=\\\"model.surname\\\" name=\\\"Surname\\\" required maxlength=\\\"32\\\" />\\n                <validation-messages [formCtrl]=\\\"surnameInput\\\"></validation-messages>\\n            </div>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #emailAddressInput=\\\"ngModel\\\" class=\\\"form-control\\\" type=\\\"email\\\" placeholder=\\\"{{l('EmailAddress')}} *\\\" [(ngModel)]=\\\"model.emailAddress\\\" name=\\\"EmailAddress\\\" required maxlength=\\\"256\\\" pattern=\\\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{1,})+$\\\" />\\n                <validation-messages [formCtrl]=\\\"emailAddressInput\\\"></validation-messages>\\n            </div>\\n\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input #userNameInput=\\\"ngModel\\\" class=\\\"form-control\\\" type=\\\"text\\\" autocomplete=\\\"off\\\" placeholder=\\\"{{l('UserName')}} *\\\" name=\\\"UserName\\\" [(ngModel)]=\\\"model.userName\\\" required maxlength=\\\"32\\\" />\\n                <validation-messages [formCtrl]=\\\"userNameInput\\\"></validation-messages>\\n            </div>\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input type=\\\"password\\\" name=\\\"Password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.password\\\" #Password=\\\"ngModel\\\" placeholder=\\\"{{l('Password')}}\\\" validateEqual=\\\"PasswordRepeat\\\"\\n                       reverse=\\\"true\\\" [requireDigit]=\\\"passwordComplexitySetting.requireDigit\\\" [requireLowercase]=\\\"passwordComplexitySetting.requireLowercase\\\"\\n                       [requireUppercase]=\\\"passwordComplexitySetting.requireUppercase\\\" [requireNonAlphanumeric]=\\\"passwordComplexitySetting.requireNonAlphanumeric\\\" [requiredLength]=\\\"passwordComplexitySetting.requiredLength\\\"\\n                       required>\\n            </div>\\n            <div [hidden]=\\\"registerForm.form.valid || registerForm.form.pristine\\\" class=\\\"form-group m-form__group\\\">\\n                <ul class=\\\"help-block text-danger\\\" *ngIf=\\\"Password.errors\\\">\\n                    <li [hidden]=\\\"!Password.errors.requireDigit\\\">{{l(\\\"PasswordComplexity_RequireDigit_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireLowercase\\\">{{l(\\\"PasswordComplexity_RequireLowercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireUppercase\\\">{{l(\\\"PasswordComplexity_RequireUppercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requireNonAlphanumeric\\\">{{l(\\\"PasswordComplexity_RequireNonAlphanumeric_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!Password.errors.requiredLength\\\">{{l(\\\"PasswordComplexity_RequiredLength_Hint\\\", passwordComplexitySetting.requiredLength)}}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"form-group m-form__group\\\">\\n                <input type=\\\"password\\\" name=\\\"PasswordRepeat\\\" class=\\\"form-control\\\" [ngModel]=\\\"model.passwordRepeat\\\" #PasswordRepeat=\\\"ngModel\\\" placeholder=\\\"{{l('PasswordRepeat')}}\\\" validateEqual=\\\"Password\\\"\\n                       reverse=\\\"false\\\" [requireDigit]=\\\"passwordComplexitySetting.requireDigit\\\" [requireLowercase]=\\\"passwordComplexitySetting.requireLowercase\\\"\\n                       [requireUppercase]=\\\"passwordComplexitySetting.requireUppercase\\\" [requireNonAlphanumeric]=\\\"passwordComplexitySetting.requireNonAlphanumeric\\\" [requiredLength]=\\\"passwordComplexitySetting.requiredLength\\\"\\n                       required>\\n            </div>\\n            <div [hidden]=\\\"registerForm.form.valid || registerForm.form.pristine\\\" class=\\\"form-group m-form__group\\\">\\n                <ul class=\\\"help-block text-danger\\\" *ngIf=\\\"PasswordRepeat.errors\\\">\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireDigit\\\">{{l(\\\"PasswordComplexity_RequireDigit_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireLowercase\\\">{{l(\\\"PasswordComplexity_RequireLowercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireUppercase\\\">{{l(\\\"PasswordComplexity_RequireUppercase_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requireNonAlphanumeric\\\">{{l(\\\"PasswordComplexity_RequireNonAlphanumeric_Hint\\\")}}</li>\\n                    <li [hidden]=\\\"!PasswordRepeat.errors.requiredLength\\\">{{l(\\\"PasswordComplexity_RequiredLength_Hint\\\", passwordComplexitySetting.requiredLength)}}</li>\\n                    <li [hidden]=\\\"PasswordRepeat.valid\\\">{{l(\\\"PasswordsDontMatch\\\")}}</li>\\n                </ul>\\n            </div>\\n            <p *ngIf=\\\"useCaptcha\\\" class=\\\"hint margin-top-20\\\">\\n                {{l(\\\"Captha_Hint\\\")}}\\n            </p>\\n\\n            <div *ngIf=\\\"useCaptcha\\\" class=\\\"form-group m--margin-bottom-20\\\">\\n                <re-captcha (resolved)=\\\"captchaResolved($event)\\\" [siteKey]=\\\"recaptchaSiteKey\\\"></re-captcha>\\n            </div>\\n\\n            <div class=\\\"m-login__form-action\\\">\\n                <button [disabled]=\\\"saving\\\" routerLink=\\\"/account/login\\\" type=\\\"button\\\" class=\\\"btn btn-outline-primary  m-btn m-btn--pill m-btn--custom\\\"><i class=\\\"fa fa-arrow-left\\\"></i> {{l(\\\"Back\\\")}}</button>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary m-btn m-btn--pill m-btn--custom m-btn--air\\\" [disabled]=\\\"!registerForm.form.valid\\\" [buttonBusy]=\\\"saving\\\" [busyText]=\\\"l('SavingWithThreeDot')\\\"><i class=\\\"fa fa-check\\\"></i> {{l(\\\"Submit\\\")}}</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\"","import { Component, Injector, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppConsts } from '@shared/AppConsts';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AccountServiceProxy, PasswordComplexitySetting, ProfileServiceProxy } from '@shared/service-proxies/service-proxies';\nimport { LoginService } from '../login/login.service';\nimport { RegisterModel } from './register.model';\n\n@Component({\n    templateUrl: './register.component.html',\n    animations: [accountModuleAnimation()]\n})\nexport class RegisterComponent extends AppComponentBase implements OnInit {\n\n    model: RegisterModel = new RegisterModel();\n    passwordComplexitySetting: PasswordComplexitySetting = new PasswordComplexitySetting();\n    recaptchaSiteKey: string = AppConsts.recaptchaSiteKey;\n\n    saving = false;\n\n    constructor(\n        injector: Injector,\n        private _accountService: AccountServiceProxy,\n        private _router: Router,\n        private readonly _loginService: LoginService,\n        private _profileService: ProfileServiceProxy\n    ) {\n        super(injector);\n    }\n\n    ngOnInit() {\n        //Prevent to register new users in the host context\n        if (this.appSession.tenant == null) {\n            this._router.navigate(['account/login']);\n            return;\n        }\n\n        this._profileService.getPasswordComplexitySetting().subscribe(result => {\n            this.passwordComplexitySetting = result.setting;\n        });\n    }\n\n    get useCaptcha(): boolean {\n        return this.setting.getBoolean('App.UserManagement.UseCaptchaOnRegistration');\n    }\n\n    save(): void {\n        if (this.useCaptcha && !this.model.captchaResponse) {\n            this.message.warn(this.l('CaptchaCanNotBeEmpty'));\n            return;\n        }\n\n        this.saving = true;\n        this._accountService.register(this.model)\n            .finally(() => { this.saving = false; })\n            .subscribe((result) => {\n                if (!result.canLogin) {\n                    this.notify.success(this.l('SuccessfullyRegistered'));\n                    this._router.navigate(['account/login']);\n                    return;\n                }\n\n                //Autheticate\n                this.saving = true;\n                this._loginService.authenticateModel.userNameOrEmailAddress = this.model.userName;\n                this._loginService.authenticateModel.password = this.model.password;\n                this._loginService.authenticate(() => { this.saving = false; });\n            });\n    }\n\n    captchaResolved(captchaResponse: string): void {\n        this.model.captchaResponse = captchaResponse;\n    }\n}\n","import { RegisterInput } from '@shared/service-proxies/service-proxies';\n\nexport class RegisterModel extends RegisterInput {\n    public passwordRepeat: string;\n}","module.exports = \"<div [@routerTransition]>\\n    <div class=\\\"m-pricing-table-1 m-pricing-table-1--fixed\\\">\\n        <div class=\\\"m-portlet\\\">\\n            <div class=\\\"m-portlet__body\\\">\\n                <div class=\\\"m-pricing-table-1__items row row-centered\\\">\\n                    <div class=\\\"m-pricing-table-1__item col-lg-3 col-centered\\\"\\n                         *ngFor=\\\"let editionWithFeatures of editionsSelectOutput.editionsWithFeatures;  let i = index\\\">\\n\\n\\n                        <div class=\\\"m-pricing-table-1__visual\\\">\\n                            <div class=\\\"m-pricing-table-1__hexagon1\\\"></div>\\n                            <div class=\\\"m-pricing-table-1__hexagon2\\\"></div>\\n                            <span class=\\\"m-pricing-table-1__icon m--font-brand\\\">\\n                                <i class=\\\"fa {{editionIcons[i]}}\\\"></i>\\n                            </span>\\n                        </div>\\n\\n\\n                        <span class=\\\"m-pricing-table-1__price\\\">\\n                            {{editionWithFeatures.edition.displayName}}\\n                        </span>\\n\\n                        <h2 class=\\\"m-pricing-table-1__subtitle\\\" *ngIf=\\\"isFree(editionWithFeatures.edition)\\\">\\n                            {{l(\\\"Free\\\")}}\\n                        </h2>\\n\\n                        <h2 class=\\\"m-pricing-table-1__subtitle\\\" *ngIf=\\\"!isFree(editionWithFeatures.edition)\\\">\\n\\n                            <span class=\\\"m-pricing-table-1__label\\\">$</span> {{editionWithFeatures.edition.monthlyPrice}} {{l(\\\"PerMonth\\\")}} /\\n                            <span class=\\\"m-pricing-table-1__label\\\">$</span>{{editionWithFeatures.edition.annualPrice}} {{l(\\\"PerYear\\\")}}\\n\\n                        </h2>\\n\\n                        <span class=\\\"m-pricing-table-1__description\\\">\\n\\n                            <ng-container *ngFor=\\\"let feature of editionsSelectOutput.allFeatures\\\">\\n                                <!--Checbox Feature-->\\n                                <ng-container *ngIf=\\\"isTrueFalseFeature(feature)\\\">\\n                                    <i class=\\\"la la-check m--font-success\\\" *ngIf=\\\"featureEnabledForEdition(feature,editionWithFeatures)\\\"></i>\\n                                    <i class=\\\"la la-times m--font-metal\\\" *ngIf=\\\"!featureEnabledForEdition(feature,editionWithFeatures)\\\"></i>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isTrueFalseFeature(feature)\\\">{{feature.displayName}}</ng-container>\\n                                <!--Checbox Feature-->\\n                                <!--Not Checbox Feature-->\\n                                <ng-container *ngIf=\\\"!isTrueFalseFeature(feature)\\\">\\n                                    <i class=\\\"la la-check m--font-success\\\"></i>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isTrueFalseFeature(feature)\\\">{{feature.displayName}}:{{getFeatureValueForEdition(feature,editionWithFeatures)}}</ng-container>\\n                                <!--Not Checbox Feature-->\\n                                <br />\\n                            </ng-container>\\n\\n                        </span>\\n\\n                        <div class=\\\"m-pricing-table-1__btn\\\">\\n\\n                            <button class=\\\"btn btn-warning m-btn m-btn--custom m-btn--pill m-btn--wide m-btn--uppercase m-btn--bolder m-btn--sm\\\"\\n                                    (click)=\\\"upgrade(editionWithFeatures.edition, editionPaymentType.Upgrade)\\\"\\n                                    *ngIf=\\\"isUserLoggedIn\\\"\\n                                    [disabled]=\\\"!canUpgrade(editionWithFeatures.edition)\\\">\\n                                {{l(\\\"Upgrade\\\")}}\\n                            </button>\\n\\n                            <button class=\\\"btn btn-success m-btn m-btn--custom m-btn--pill m-btn--wide m-btn--uppercase m-btn--bolder m-btn--sm\\\"\\n                                    [routerLink]=\\\"['/account/register-tenant']\\\"\\n                                    [queryParams]=\\\"{editionId: editionWithFeatures.edition.id, subscriptionStartType: subscriptionStartType.Free}\\\"\\n                                    href=\\\"#\\\"\\n                                    *ngIf=\\\"!isUserLoggedIn && isFree(editionWithFeatures.edition)\\\">\\n                                {{l(\\\"Start\\\")}}\\n                            </button>\\n\\n                            <button class=\\\"btn btn-warning m-btn m-btn--custom m-btn--pill m-btn--wide m-btn--uppercase m-btn--bolder m-btn--sm\\\"\\n                                    [routerLink]=\\\"['/account/register-tenant']\\\"\\n                                    [queryParams]=\\\"{editionId: editionWithFeatures.edition.id, subscriptionStartType: subscriptionStartType.Trial}\\\"\\n                                    href=\\\"#\\\"\\n                                    *ngIf=\\\"!isUserLoggedIn && !isFree(editionWithFeatures.edition) && editionWithFeatures.edition.trialDayCount\\\">\\n                                {{l(\\\"FreeTrial\\\")}}\\n                            </button>\\n\\n                            <button class=\\\"btn btn-brand m-btn m-btn--custom m-btn--pill m-btn--wide m-btn--uppercase m-btn--bolder m-btn--sm\\\"\\n                                    [routerLink]=\\\"['/account/buy']\\\"\\n                                    [queryParams]=\\\"{editionId: editionWithFeatures.edition.id, editionPaymentType: editionPaymentType.NewRegistration, subscriptionStartType: subscriptionStartType.Paid}\\\"\\n                                    href=\\\"#\\\"\\n                                    *ngIf=\\\"!isUserLoggedIn && !isFree(editionWithFeatures.edition)\\\">\\n                                {{l(\\\"BuyNow\\\")}}\\n                            </button>\\n\\n                        </div>\\n\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"/* centered columns styles */\\n.row-centered {\\n  text-align: center;\\n  display: block !important;\\n}\\n.col-centered {\\n  display: inline-table;\\n  float: none;\\n  /* reset the text-align */\\n  text-align: left;\\n  /* inline-block space fix */\\n  margin-right: -4px;\\n}\\n.m-pricing-table-1__price,\\n.m-pricing-table-1__subtitle,\\n.m-pricing-table-1__btn {\\n  text-align: center;\\n}\\nbody {\\n  background-color: #f2f3f8;\\n}\\ndiv.m-content div.m-login__logo {\\n  margin-bottom: 50px !important;\\n}\\n.m-pricing-table-1__item:nth-child(4n) {\\n  border-right: none !important;\\n}\\n.m-pricing-table-1 .m-pricing-table-1__items .m-pricing-table-1__item .m-pricing-table-1__price {\\n  font-size: 2rem !important;\\n}\\nbutton:disabled,\\nbutton[disabled] {\\n  cursor: not-allowed !important;\\n}\\n\"","import { Component, Injector, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { EditionPaymentType, SubscriptionStartType } from '@shared/AppEnums';\nimport { accountModuleAnimation } from '@shared/animations/routerTransition';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppSessionService } from '@shared/common/session/app-session.service';\nimport { EditionSelectDto, EditionWithFeaturesDto, EditionsSelectOutput, FlatFeatureSelectDto, SubscriptionServiceProxy, TenantRegistrationServiceProxy } from '@shared/service-proxies/service-proxies';\nimport * as _ from 'lodash';\n\n@Component({\n    templateUrl: './select-edition.component.html',\n    styleUrls: ['./select-edition.component.less', './pricing.min.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [accountModuleAnimation()]\n})\nexport class SelectEditionComponent extends AppComponentBase implements OnInit {\n\n    editionsSelectOutput: EditionsSelectOutput = new EditionsSelectOutput();\n    isUserLoggedIn = false;\n    isSetted = false;\n    editionPaymentType: typeof EditionPaymentType = EditionPaymentType;\n    subscriptionStartType: typeof SubscriptionStartType = SubscriptionStartType;\n    /*you can change your edition icons order within editionIcons variable */\n    editionIcons: string[] = [\"flaticon-open-box\", \"flaticon-rocket\", \"flaticon-gift\", \"flaticon-confetti\", \"flaticon-puzzle\", \"flaticon-app\", \"flaticon-coins\", \"flaticon-piggy-bank\", \"flaticon-bag\", \"flaticon-lifebuoy\", \"flaticon-technology-1\", \"flaticon-cogwheel-1\", \"flaticon-infinity\", \"flaticon-interface-5\", \"flaticon-squares-3\", \"flaticon-interface-6\", \"flaticon-mark\", \"flaticon-business\", \"flaticon-interface-7\", \"flaticon-list-2\", \"flaticon-bell\", \"flaticon-technology\", \"flaticon-squares-2\", \"flaticon-notes\", \"flaticon-profile\", \"flaticon-layers\", \"flaticon-interface-4\", \"flaticon-signs\", \"flaticon-menu-1\", \"flaticon-symbol\"];\n\n    constructor(\n        injector: Injector,\n        private _tenantRegistrationService: TenantRegistrationServiceProxy,\n        private _subscriptionService: SubscriptionServiceProxy,\n        private _appSessionService: AppSessionService,\n        private _router: Router\n    ) {\n        super(injector);\n    }\n\n    ngOnInit() {\n        this.isUserLoggedIn = abp.session.userId > 0;\n\n        this._tenantRegistrationService.getEditionsForSelect()\n            .subscribe((result) => {\n                this.editionsSelectOutput = result;\n\n                if (!this.editionsSelectOutput.editionsWithFeatures || this.editionsSelectOutput.editionsWithFeatures.length <= 0) {\n                    this._router.navigate(['/account/register-tenant']);\n                }\n            });\n    }\n\n    isFree(edition: EditionSelectDto): boolean {\n        return !edition.monthlyPrice && !edition.annualPrice;\n    }\n\n    isTrueFalseFeature(feature: FlatFeatureSelectDto): boolean {\n        return feature.inputType.name === 'CHECKBOX';\n    }\n\n    featureEnabledForEdition(feature: FlatFeatureSelectDto, edition: EditionWithFeaturesDto): boolean {\n        const featureValues = _.filter(edition.featureValues, { name: feature.name });\n        if (!featureValues || featureValues.length <= 0) {\n            return false;\n        }\n\n        const featureValue = featureValues[0];\n        return featureValue.value.toLowerCase() === 'true';\n    }\n\n    getFeatureValueForEdition(feature: FlatFeatureSelectDto, edition: EditionWithFeaturesDto): string {\n        const featureValues = _.filter(edition.featureValues, { name: feature.name });\n        if (!featureValues || featureValues.length <= 0) {\n            return '';\n        }\n\n        const featureValue = featureValues[0];\n        return featureValue.value;\n    }\n\n    canUpgrade(edition: EditionSelectDto): boolean {\n        if (this._appSessionService.tenant.edition.id === edition.id) {\n            return false;\n        }\n\n        const currentMonthlyPrice = this._appSessionService.tenant.edition.monthlyPrice\n            ? this._appSessionService.tenant.edition.monthlyPrice\n            : 0;\n\n        const targetMonthlyPrice = edition && edition.monthlyPrice ? edition.monthlyPrice : 0;\n\n        return this.isUserLoggedIn &&\n            this._appSessionService.tenant.edition &&\n            currentMonthlyPrice <= targetMonthlyPrice;\n    }\n\n    upgrade(upgradeEdition: EditionSelectDto, editionPaymentType: EditionPaymentType): void {\n        if (editionPaymentType === EditionPaymentType.Upgrade && this.upgradeIsFree(upgradeEdition)) {\n            this._subscriptionService.upgradeTenantToEquivalentEdition(upgradeEdition.id)\n                .subscribe(() => {\n                    this._router.navigate(['app/admin/subscription-management']);\n                });\n        } else {\n            this._router.navigate(['/account/upgrade'], { queryParams: { upgradeEditionId: upgradeEdition.id, editionPaymentType: editionPaymentType } });\n        }\n    }\n\n    upgradeIsFree(upgradeEdition: EditionSelectDto): boolean {\n        if (!this._appSessionService.tenant || !this._appSessionService.tenant.edition) {\n            return false;\n        }\n\n        const bothEditionsAreFree = this._appSessionService.tenant.edition.isFree && upgradeEdition.isFree;\n\n        const bothEditionsHasSamePrice = !upgradeEdition.isFree &&\n            upgradeEdition.monthlyPrice === this._appSessionService.tenant.edition.monthlyPrice &&\n            upgradeEdition.annualPrice === this._appSessionService.tenant.edition.annualPrice;\n\n        return bothEditionsAreFree || bothEditionsHasSamePrice;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { RegisterTenantOutput } from '@shared/service-proxies/service-proxies';\n\n@Injectable()\nexport class TenantRegistrationHelperService {\n\n    registrationResult: RegisterTenantOutput;\n\n}","module.exports = \"<div bsModal #tenantChangeModal=\\\"bs-modal\\\" (onShown)=\\\"onShown()\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"tenantChangeModal\\\" aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: 'static'}\\\">\\n    <div class=\\\"modal-dialog modal-lg\\\">\\n\\n        <div class=\\\"modal-content\\\">\\n\\n            <form *ngIf=\\\"active\\\" #changeTenantForm=\\\"ngForm\\\" novalidate (ngSubmit)=\\\"save()\\\">\\n\\n                <div class=\\\"modal-header\\\">\\n                    <h5 class=\\\"modal-title\\\">\\n                        <span>{{l(\\\"ChangeTenant\\\")}}</span>\\n                    </h5>\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\"></button>\\n                </div>\\n\\n                <div class=\\\"modal-body\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"float-left\\\">{{l(\\\"TenancyName\\\")}}</label>\\n                        <input #tenancyNameInput type=\\\"text\\\" name=\\\"TenancyName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{'edited':tenancyName}\\\" [(ngModel)]=\\\"tenancyName\\\" maxlength=\\\"64\\\">\\n                        <span class=\\\"float-left m-form__help\\\">{{l(\\\"LeaveEmptyToSwitchToHost\\\")}}</span>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"modal-footer\\\">\\n                    <button [disabled]=\\\"saving\\\" type=\\\"button\\\" class=\\\"btn btn-secondary close-button\\\" (click)=\\\"close()\\\">{{l(\\\"Cancel\\\")}}</button>\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary save-button\\\" [disabled]=\\\"!changeTenantForm.form.valid\\\" [buttonBusy]=\\\"saving\\\" [busyText]=\\\"l('SavingWithThreeDot')\\\"><i class=\\\"fa fa-save\\\"></i> <span>{{l(\\\"Save\\\")}}</span></button>\\n                </div>\\n\\n            </form>\\n\\n        </div>\\n    </div>\\n</div>\\n\"","import { Component, ElementRef, Injector, ViewChild } from '@angular/core';\nimport { AppTenantAvailabilityState } from '@shared/AppEnums';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AccountServiceProxy, IsTenantAvailableInput } from '@shared/service-proxies/service-proxies';\nimport { ModalDirective } from 'ngx-bootstrap';\n\n@Component({\n    selector: 'tenantChangeModal',\n    templateUrl: './tenant-change-modal.component.html'\n})\nexport class TenantChangeModalComponent extends AppComponentBase {\n\n    @ViewChild('tenantChangeModal') modal: ModalDirective;\n    @ViewChild('tenancyNameInput') tenancyNameInput: ElementRef;\n\n    tenancyName = '';\n    active = false;\n    saving = false;\n\n    constructor(\n        private _accountService: AccountServiceProxy,\n        injector: Injector\n    ) {\n        super(injector);\n    }\n\n    show(tenancyName: string): void {\n        this.tenancyName = tenancyName;\n        this.active = true;\n        this.modal.show();\n    }\n\n    onShown(): void {\n        $(this.tenancyNameInput.nativeElement).focus().select();\n    }\n\n    save(): void {\n\n        if (!this.tenancyName) {\n            abp.multiTenancy.setTenantIdCookie(undefined);\n            this.close();\n            location.reload();\n            return;\n        }\n\n        let input = new IsTenantAvailableInput();\n        input.tenancyName = this.tenancyName;\n\n        this.saving = true;\n        this._accountService.isTenantAvailable(input)\n            .finally(() => { this.saving = false; })\n            .subscribe((result) => {\n                switch (result.state) {\n                    case AppTenantAvailabilityState.Available:\n                        abp.multiTenancy.setTenantIdCookie(result.tenantId);\n                        this.close();\n                        location.reload();\n                        return;\n                    case AppTenantAvailabilityState.InActive:\n                        this.message.warn(this.l('TenantIsNotActive', this.tenancyName));\n                        break;\n                    case AppTenantAvailabilityState.NotFound: //NotFound\n                        this.message.warn(this.l('ThereIsNoTenantDefinedWithName{0}', this.tenancyName));\n                        break;\n                }\n            });\n    }\n\n    close(): void {\n        this.active = false;\n        this.modal.hide();\n    }\n}\n","import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { AppComponentBase } from '@shared/common/app-component-base';\nimport { AppSessionService } from '@shared/common/session/app-session.service';\nimport { AccountServiceProxy } from '@shared/service-proxies/service-proxies';\nimport { TenantChangeModalComponent } from './tenant-change-modal.component';\n\n@Component({\n    selector: 'tenant-change',\n    template:\n    `<span *ngIf=\"isMultiTenancyEnabled\">\n        {{l(\"CurrentTenant\")}}: <span *ngIf=\"tenancyName\" title=\"{{name}}\"><strong>{{tenancyName}}</strong></span> <span *ngIf=\"!tenancyName\">{{l(\"NotSelected\")}}</span> (<a href=\"javascript:;\" (click)=\"showChangeModal()\">{{l(\"Change\")}}</a>)\n        <tenantChangeModal #tenantChangeModal></tenantChangeModal>\n    </span>`\n})\nexport class TenantChangeComponent extends AppComponentBase implements OnInit {\n\n    @ViewChild('tenantChangeModal') tenantChangeModal: TenantChangeModalComponent;\n\n    tenancyName: string;\n    name: string;\n\n    constructor(\n        injector: Injector,\n        private _appSessionService: AppSessionService,\n        private _accountService: AccountServiceProxy\n        ) {\n        super(injector);\n    }\n\n    ngOnInit() {\n        if (this._appSessionService.tenant) {\n            this.tenancyName = this._appSessionService.tenant.tenancyName;\n            this.name = this._appSessionService.tenant.name;\n        }\n    }\n\n    get isMultiTenancyEnabled(): boolean {\n        return abp.multiTenancy.isEnabled;\n    }\n\n    showChangeModal(): void {\n        this.tenantChangeModal.show(this.tenancyName);\n    }\n}\n"],"sourceRoot":""}